/*
SATP Gateway Client (Business Logic Orchestrator)

SATP is a protocol operating between two gateways that conducts the transfer of a digital asset from one gateway to another. The protocol establishes a secure channel between the endpoints and implements a 2-phase commit to ensure the properties of transfer atomicity, consistency, isolation and durability.  This API defines the gateway client facing API (business logic orchestrator, or BLO), which is named API-Type 1 in the SATP-Core specification.  **Additional Resources**: - [Proposed SATP Charter](https://datatracker.ietf.org/doc/charter-ietf-satp/) - [SATP Core draft](https://datatracker.ietf.org/doc/draft-ietf-satp-core) - [SATP Crash Recovery draft](https://datatracker.ietf.org/doc/draft-belchior-satp-gateway-recovery/) - [SATP Architecture draft](https://datatracker.ietf.org/doc/draft-ietf-satp-architecture/) - [SATP Use-Cases draft](https://datatracker.ietf.org/doc/draft-ramakrishna-sat-use-cases/) - [SATP Data sharing draft](https://datatracker.ietf.org/doc/draft-ramakrishna-satp-data-sharing) - [SATP View Addresses draft](https://datatracker.ietf.org/doc/draft-ramakrishna-satp-views-addresses)

API version: 0.0.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package generated

import (
	"encoding/json"
)

// checks if the OracleRegisterRequestRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OracleRegisterRequestRequest{}

// OracleRegisterRequestRequest Request schema for registering a repeatable task.
type OracleRegisterRequestRequest struct {
	// The source blockchain network identifier. Only if taskType is READ or READ_AND_UPDATE.
	SourceNetwork *string `json:"sourceNetwork,omitempty"`
	// The target blockchain network identifier. Only if taskType is UPDATE or READ_AND_UPDATE.
	TargetNetwork *string `json:"targetNetwork,omitempty"`
	// The contract address on the source blockchain. Only if taskType is READ or READ_AND_UPDATE.
	SourceContract *string `json:"sourceContract,omitempty"`
	// The contract address on the destination blockchain. Only if taskType is UPDATE or READ_AND_UPDATE.
	DestinationContract *string `json:"destinationContract,omitempty"`
	// The signature of the event of interest on the source blockchain. Only if taskType is READ or READ_AND_UPDATE.
	EventSignature *string `json:"eventSignature,omitempty"`
	// The function to be called on the source blockchain. Only if taskType is READ or READ_AND_UPDATE.
	SourceFunctionName *string `json:"sourceFunctionName,omitempty"`
	// The parameters for the function to be called on the source blockchain. Only if taskType is READ or READ_AND_UPDATE.
	SourceFunctionParams []string `json:"sourceFunctionParams,omitempty"`
	// The function to be called on the destination blockchain. Only if taskType is UPDATE or READ_AND_UPDATE.
	DestinationFunctionName *string `json:"destinationFunctionName,omitempty"`
	// The parameters for the function to be called on the destination blockchain. Only if taskType is UPDATE or READ_AND_UPDATE.
	DestinationFunctionParams []string `json:"destinationFunctionParams,omitempty"`
	// The mode of operation for the repeatable task.
	TaskMode string `json:"taskMode"`
	// The interval for polling in milliseconds. Only if taskMode is POLLING.
	TaskInterval *int32 `json:"taskInterval,omitempty"`
	// The type of task to be registered.
	TaskType string `json:"taskType"`
}

// NewOracleRegisterRequestRequest instantiates a new OracleRegisterRequestRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOracleRegisterRequestRequest(taskMode string, taskType string) *OracleRegisterRequestRequest {
	this := OracleRegisterRequestRequest{}
	this.TaskMode = taskMode
	this.TaskType = taskType
	return &this
}

// NewOracleRegisterRequestRequestWithDefaults instantiates a new OracleRegisterRequestRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOracleRegisterRequestRequestWithDefaults() *OracleRegisterRequestRequest {
	this := OracleRegisterRequestRequest{}
	return &this
}

// GetSourceNetwork returns the SourceNetwork field value if set, zero value otherwise.
func (o *OracleRegisterRequestRequest) GetSourceNetwork() string {
	if o == nil || IsNil(o.SourceNetwork) {
		var ret string
		return ret
	}
	return *o.SourceNetwork
}

// GetSourceNetworkOk returns a tuple with the SourceNetwork field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OracleRegisterRequestRequest) GetSourceNetworkOk() (*string, bool) {
	if o == nil || IsNil(o.SourceNetwork) {
		return nil, false
	}
	return o.SourceNetwork, true
}

// HasSourceNetwork returns a boolean if a field has been set.
func (o *OracleRegisterRequestRequest) HasSourceNetwork() bool {
	if o != nil && !IsNil(o.SourceNetwork) {
		return true
	}

	return false
}

// SetSourceNetwork gets a reference to the given string and assigns it to the SourceNetwork field.
func (o *OracleRegisterRequestRequest) SetSourceNetwork(v string) {
	o.SourceNetwork = &v
}

// GetTargetNetwork returns the TargetNetwork field value if set, zero value otherwise.
func (o *OracleRegisterRequestRequest) GetTargetNetwork() string {
	if o == nil || IsNil(o.TargetNetwork) {
		var ret string
		return ret
	}
	return *o.TargetNetwork
}

// GetTargetNetworkOk returns a tuple with the TargetNetwork field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OracleRegisterRequestRequest) GetTargetNetworkOk() (*string, bool) {
	if o == nil || IsNil(o.TargetNetwork) {
		return nil, false
	}
	return o.TargetNetwork, true
}

// HasTargetNetwork returns a boolean if a field has been set.
func (o *OracleRegisterRequestRequest) HasTargetNetwork() bool {
	if o != nil && !IsNil(o.TargetNetwork) {
		return true
	}

	return false
}

// SetTargetNetwork gets a reference to the given string and assigns it to the TargetNetwork field.
func (o *OracleRegisterRequestRequest) SetTargetNetwork(v string) {
	o.TargetNetwork = &v
}

// GetSourceContract returns the SourceContract field value if set, zero value otherwise.
func (o *OracleRegisterRequestRequest) GetSourceContract() string {
	if o == nil || IsNil(o.SourceContract) {
		var ret string
		return ret
	}
	return *o.SourceContract
}

// GetSourceContractOk returns a tuple with the SourceContract field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OracleRegisterRequestRequest) GetSourceContractOk() (*string, bool) {
	if o == nil || IsNil(o.SourceContract) {
		return nil, false
	}
	return o.SourceContract, true
}

// HasSourceContract returns a boolean if a field has been set.
func (o *OracleRegisterRequestRequest) HasSourceContract() bool {
	if o != nil && !IsNil(o.SourceContract) {
		return true
	}

	return false
}

// SetSourceContract gets a reference to the given string and assigns it to the SourceContract field.
func (o *OracleRegisterRequestRequest) SetSourceContract(v string) {
	o.SourceContract = &v
}

// GetDestinationContract returns the DestinationContract field value if set, zero value otherwise.
func (o *OracleRegisterRequestRequest) GetDestinationContract() string {
	if o == nil || IsNil(o.DestinationContract) {
		var ret string
		return ret
	}
	return *o.DestinationContract
}

// GetDestinationContractOk returns a tuple with the DestinationContract field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OracleRegisterRequestRequest) GetDestinationContractOk() (*string, bool) {
	if o == nil || IsNil(o.DestinationContract) {
		return nil, false
	}
	return o.DestinationContract, true
}

// HasDestinationContract returns a boolean if a field has been set.
func (o *OracleRegisterRequestRequest) HasDestinationContract() bool {
	if o != nil && !IsNil(o.DestinationContract) {
		return true
	}

	return false
}

// SetDestinationContract gets a reference to the given string and assigns it to the DestinationContract field.
func (o *OracleRegisterRequestRequest) SetDestinationContract(v string) {
	o.DestinationContract = &v
}

// GetEventSignature returns the EventSignature field value if set, zero value otherwise.
func (o *OracleRegisterRequestRequest) GetEventSignature() string {
	if o == nil || IsNil(o.EventSignature) {
		var ret string
		return ret
	}
	return *o.EventSignature
}

// GetEventSignatureOk returns a tuple with the EventSignature field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OracleRegisterRequestRequest) GetEventSignatureOk() (*string, bool) {
	if o == nil || IsNil(o.EventSignature) {
		return nil, false
	}
	return o.EventSignature, true
}

// HasEventSignature returns a boolean if a field has been set.
func (o *OracleRegisterRequestRequest) HasEventSignature() bool {
	if o != nil && !IsNil(o.EventSignature) {
		return true
	}

	return false
}

// SetEventSignature gets a reference to the given string and assigns it to the EventSignature field.
func (o *OracleRegisterRequestRequest) SetEventSignature(v string) {
	o.EventSignature = &v
}

// GetSourceFunctionName returns the SourceFunctionName field value if set, zero value otherwise.
func (o *OracleRegisterRequestRequest) GetSourceFunctionName() string {
	if o == nil || IsNil(o.SourceFunctionName) {
		var ret string
		return ret
	}
	return *o.SourceFunctionName
}

// GetSourceFunctionNameOk returns a tuple with the SourceFunctionName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OracleRegisterRequestRequest) GetSourceFunctionNameOk() (*string, bool) {
	if o == nil || IsNil(o.SourceFunctionName) {
		return nil, false
	}
	return o.SourceFunctionName, true
}

// HasSourceFunctionName returns a boolean if a field has been set.
func (o *OracleRegisterRequestRequest) HasSourceFunctionName() bool {
	if o != nil && !IsNil(o.SourceFunctionName) {
		return true
	}

	return false
}

// SetSourceFunctionName gets a reference to the given string and assigns it to the SourceFunctionName field.
func (o *OracleRegisterRequestRequest) SetSourceFunctionName(v string) {
	o.SourceFunctionName = &v
}

// GetSourceFunctionParams returns the SourceFunctionParams field value if set, zero value otherwise.
func (o *OracleRegisterRequestRequest) GetSourceFunctionParams() []string {
	if o == nil || IsNil(o.SourceFunctionParams) {
		var ret []string
		return ret
	}
	return o.SourceFunctionParams
}

// GetSourceFunctionParamsOk returns a tuple with the SourceFunctionParams field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OracleRegisterRequestRequest) GetSourceFunctionParamsOk() ([]string, bool) {
	if o == nil || IsNil(o.SourceFunctionParams) {
		return nil, false
	}
	return o.SourceFunctionParams, true
}

// HasSourceFunctionParams returns a boolean if a field has been set.
func (o *OracleRegisterRequestRequest) HasSourceFunctionParams() bool {
	if o != nil && !IsNil(o.SourceFunctionParams) {
		return true
	}

	return false
}

// SetSourceFunctionParams gets a reference to the given []string and assigns it to the SourceFunctionParams field.
func (o *OracleRegisterRequestRequest) SetSourceFunctionParams(v []string) {
	o.SourceFunctionParams = v
}

// GetDestinationFunctionName returns the DestinationFunctionName field value if set, zero value otherwise.
func (o *OracleRegisterRequestRequest) GetDestinationFunctionName() string {
	if o == nil || IsNil(o.DestinationFunctionName) {
		var ret string
		return ret
	}
	return *o.DestinationFunctionName
}

// GetDestinationFunctionNameOk returns a tuple with the DestinationFunctionName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OracleRegisterRequestRequest) GetDestinationFunctionNameOk() (*string, bool) {
	if o == nil || IsNil(o.DestinationFunctionName) {
		return nil, false
	}
	return o.DestinationFunctionName, true
}

// HasDestinationFunctionName returns a boolean if a field has been set.
func (o *OracleRegisterRequestRequest) HasDestinationFunctionName() bool {
	if o != nil && !IsNil(o.DestinationFunctionName) {
		return true
	}

	return false
}

// SetDestinationFunctionName gets a reference to the given string and assigns it to the DestinationFunctionName field.
func (o *OracleRegisterRequestRequest) SetDestinationFunctionName(v string) {
	o.DestinationFunctionName = &v
}

// GetDestinationFunctionParams returns the DestinationFunctionParams field value if set, zero value otherwise.
func (o *OracleRegisterRequestRequest) GetDestinationFunctionParams() []string {
	if o == nil || IsNil(o.DestinationFunctionParams) {
		var ret []string
		return ret
	}
	return o.DestinationFunctionParams
}

// GetDestinationFunctionParamsOk returns a tuple with the DestinationFunctionParams field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OracleRegisterRequestRequest) GetDestinationFunctionParamsOk() ([]string, bool) {
	if o == nil || IsNil(o.DestinationFunctionParams) {
		return nil, false
	}
	return o.DestinationFunctionParams, true
}

// HasDestinationFunctionParams returns a boolean if a field has been set.
func (o *OracleRegisterRequestRequest) HasDestinationFunctionParams() bool {
	if o != nil && !IsNil(o.DestinationFunctionParams) {
		return true
	}

	return false
}

// SetDestinationFunctionParams gets a reference to the given []string and assigns it to the DestinationFunctionParams field.
func (o *OracleRegisterRequestRequest) SetDestinationFunctionParams(v []string) {
	o.DestinationFunctionParams = v
}

// GetTaskMode returns the TaskMode field value
func (o *OracleRegisterRequestRequest) GetTaskMode() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TaskMode
}

// GetTaskModeOk returns a tuple with the TaskMode field value
// and a boolean to check if the value has been set.
func (o *OracleRegisterRequestRequest) GetTaskModeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TaskMode, true
}

// SetTaskMode sets field value
func (o *OracleRegisterRequestRequest) SetTaskMode(v string) {
	o.TaskMode = v
}

// GetTaskInterval returns the TaskInterval field value if set, zero value otherwise.
func (o *OracleRegisterRequestRequest) GetTaskInterval() int32 {
	if o == nil || IsNil(o.TaskInterval) {
		var ret int32
		return ret
	}
	return *o.TaskInterval
}

// GetTaskIntervalOk returns a tuple with the TaskInterval field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OracleRegisterRequestRequest) GetTaskIntervalOk() (*int32, bool) {
	if o == nil || IsNil(o.TaskInterval) {
		return nil, false
	}
	return o.TaskInterval, true
}

// HasTaskInterval returns a boolean if a field has been set.
func (o *OracleRegisterRequestRequest) HasTaskInterval() bool {
	if o != nil && !IsNil(o.TaskInterval) {
		return true
	}

	return false
}

// SetTaskInterval gets a reference to the given int32 and assigns it to the TaskInterval field.
func (o *OracleRegisterRequestRequest) SetTaskInterval(v int32) {
	o.TaskInterval = &v
}

// GetTaskType returns the TaskType field value
func (o *OracleRegisterRequestRequest) GetTaskType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TaskType
}

// GetTaskTypeOk returns a tuple with the TaskType field value
// and a boolean to check if the value has been set.
func (o *OracleRegisterRequestRequest) GetTaskTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TaskType, true
}

// SetTaskType sets field value
func (o *OracleRegisterRequestRequest) SetTaskType(v string) {
	o.TaskType = v
}

func (o OracleRegisterRequestRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OracleRegisterRequestRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.SourceNetwork) {
		toSerialize["sourceNetwork"] = o.SourceNetwork
	}
	if !IsNil(o.TargetNetwork) {
		toSerialize["targetNetwork"] = o.TargetNetwork
	}
	if !IsNil(o.SourceContract) {
		toSerialize["sourceContract"] = o.SourceContract
	}
	if !IsNil(o.DestinationContract) {
		toSerialize["destinationContract"] = o.DestinationContract
	}
	if !IsNil(o.EventSignature) {
		toSerialize["eventSignature"] = o.EventSignature
	}
	if !IsNil(o.SourceFunctionName) {
		toSerialize["sourceFunctionName"] = o.SourceFunctionName
	}
	if !IsNil(o.SourceFunctionParams) {
		toSerialize["sourceFunctionParams"] = o.SourceFunctionParams
	}
	if !IsNil(o.DestinationFunctionName) {
		toSerialize["destinationFunctionName"] = o.DestinationFunctionName
	}
	if !IsNil(o.DestinationFunctionParams) {
		toSerialize["destinationFunctionParams"] = o.DestinationFunctionParams
	}
	toSerialize["taskMode"] = o.TaskMode
	if !IsNil(o.TaskInterval) {
		toSerialize["taskInterval"] = o.TaskInterval
	}
	toSerialize["taskType"] = o.TaskType
	return toSerialize, nil
}

type NullableOracleRegisterRequestRequest struct {
	value *OracleRegisterRequestRequest
	isSet bool
}

func (v NullableOracleRegisterRequestRequest) Get() *OracleRegisterRequestRequest {
	return v.value
}

func (v *NullableOracleRegisterRequestRequest) Set(val *OracleRegisterRequestRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableOracleRegisterRequestRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableOracleRegisterRequestRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOracleRegisterRequestRequest(val *OracleRegisterRequestRequest) *NullableOracleRegisterRequestRequest {
	return &NullableOracleRegisterRequestRequest{value: val, isSet: true}
}

func (v NullableOracleRegisterRequestRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOracleRegisterRequestRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


