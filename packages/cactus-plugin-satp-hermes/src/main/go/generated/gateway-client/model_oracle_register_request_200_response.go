/*
SATP Gateway Client (Business Logic Orchestrator)

SATP is a protocol operating between two gateways that conducts the transfer of a digital asset from one gateway to another. The protocol establishes a secure channel between the endpoints and implements a 2-phase commit to ensure the properties of transfer atomicity, consistency, isolation and durability.  This API defines the gateway client facing API (business logic orchestrator, or BLO), which is named API-Type 1 in the SATP-Core specification.  **Additional Resources**: - [Proposed SATP Charter](https://datatracker.ietf.org/doc/charter-ietf-satp/) - [SATP Core draft](https://datatracker.ietf.org/doc/draft-ietf-satp-core) - [SATP Crash Recovery draft](https://datatracker.ietf.org/doc/draft-belchior-satp-gateway-recovery/) - [SATP Architecture draft](https://datatracker.ietf.org/doc/draft-ietf-satp-architecture/) - [SATP Use-Cases draft](https://datatracker.ietf.org/doc/draft-ramakrishna-sat-use-cases/) - [SATP Data sharing draft](https://datatracker.ietf.org/doc/draft-ramakrishna-satp-data-sharing) - [SATP View Addresses draft](https://datatracker.ietf.org/doc/draft-ramakrishna-satp-views-addresses)

API version: 0.0.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package generated

import (
	"encoding/json"
)

// checks if the OracleRegisterRequest200Response type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OracleRegisterRequest200Response{}

// OracleRegisterRequest200Response Response schema for registering a data transfer task.
type OracleRegisterRequest200Response struct {
	// The unique identifier for the context of the data transfer task.
	ContextID string `json:"contextID"`
	// The status of the registered data transfer task.
	Status string `json:"status"`
	Substatus string `json:"substatus"`
}

// NewOracleRegisterRequest200Response instantiates a new OracleRegisterRequest200Response object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOracleRegisterRequest200Response(contextID string, status string, substatus string) *OracleRegisterRequest200Response {
	this := OracleRegisterRequest200Response{}
	this.ContextID = contextID
	this.Status = status
	this.Substatus = substatus
	return &this
}

// NewOracleRegisterRequest200ResponseWithDefaults instantiates a new OracleRegisterRequest200Response object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOracleRegisterRequest200ResponseWithDefaults() *OracleRegisterRequest200Response {
	this := OracleRegisterRequest200Response{}
	return &this
}

// GetContextID returns the ContextID field value
func (o *OracleRegisterRequest200Response) GetContextID() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ContextID
}

// GetContextIDOk returns a tuple with the ContextID field value
// and a boolean to check if the value has been set.
func (o *OracleRegisterRequest200Response) GetContextIDOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ContextID, true
}

// SetContextID sets field value
func (o *OracleRegisterRequest200Response) SetContextID(v string) {
	o.ContextID = v
}

// GetStatus returns the Status field value
func (o *OracleRegisterRequest200Response) GetStatus() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *OracleRegisterRequest200Response) GetStatusOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *OracleRegisterRequest200Response) SetStatus(v string) {
	o.Status = v
}

// GetSubstatus returns the Substatus field value
func (o *OracleRegisterRequest200Response) GetSubstatus() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Substatus
}

// GetSubstatusOk returns a tuple with the Substatus field value
// and a boolean to check if the value has been set.
func (o *OracleRegisterRequest200Response) GetSubstatusOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Substatus, true
}

// SetSubstatus sets field value
func (o *OracleRegisterRequest200Response) SetSubstatus(v string) {
	o.Substatus = v
}

func (o OracleRegisterRequest200Response) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OracleRegisterRequest200Response) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["contextID"] = o.ContextID
	toSerialize["status"] = o.Status
	toSerialize["substatus"] = o.Substatus
	return toSerialize, nil
}

type NullableOracleRegisterRequest200Response struct {
	value *OracleRegisterRequest200Response
	isSet bool
}

func (v NullableOracleRegisterRequest200Response) Get() *OracleRegisterRequest200Response {
	return v.value
}

func (v *NullableOracleRegisterRequest200Response) Set(val *OracleRegisterRequest200Response) {
	v.value = val
	v.isSet = true
}

func (v NullableOracleRegisterRequest200Response) IsSet() bool {
	return v.isSet
}

func (v *NullableOracleRegisterRequest200Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOracleRegisterRequest200Response(val *OracleRegisterRequest200Response) *NullableOracleRegisterRequest200Response {
	return &NullableOracleRegisterRequest200Response{value: val, isSet: true}
}

func (v NullableOracleRegisterRequest200Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOracleRegisterRequest200Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


