/*
SATP Gateway Client (Business Logic Orchestrator)

SATP is a protocol operating between two gateways that conducts the transfer of a digital asset from one gateway to another. The protocol establishes a secure channel between the endpoints and implements a 2-phase commit to ensure the properties of transfer atomicity, consistency, isolation and durability.  This API defines the gateway client facing API (business logic orchestrator, or BLO), which is named API-Type 1 in the SATP-Core specification.  **Additional Resources**: - [Proposed SATP Charter](https://datatracker.ietf.org/doc/charter-ietf-satp/) - [SATP Core draft](https://datatracker.ietf.org/doc/draft-ietf-satp-core) - [SATP Crash Recovery draft](https://datatracker.ietf.org/doc/draft-belchior-satp-gateway-recovery/) - [SATP Architecture draft](https://datatracker.ietf.org/doc/draft-ietf-satp-architecture/) - [SATP Use-Cases draft](https://datatracker.ietf.org/doc/draft-ramakrishna-sat-use-cases/) - [SATP Data sharing draft](https://datatracker.ietf.org/doc/draft-ramakrishna-satp-data-sharing) - [SATP View Addresses draft](https://datatracker.ietf.org/doc/draft-ramakrishna-satp-views-addresses)

API version: 0.0.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package generated

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
)


type OracleApi interface {

	/*
	OracleExecuteRequest Execute data transfer task

	Execute a registered data transfer task from source to target blockchain

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiOracleExecuteRequestRequest
	*/
	OracleExecuteRequest(ctx context.Context) ApiOracleExecuteRequestRequest

	// OracleExecuteRequestExecute executes the request
	//  @return OracleExecuteRequest200Response
	OracleExecuteRequestExecute(r ApiOracleExecuteRequestRequest) (*OracleExecuteRequest200Response, *http.Response, error)

	/*
	OracleRegisterRequest Register data transfer task

	Register data transfer from source to target blockchain

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiOracleRegisterRequestRequest
	*/
	OracleRegisterRequest(ctx context.Context) ApiOracleRegisterRequestRequest

	// OracleRegisterRequestExecute executes the request
	//  @return OracleRegisterRequest200Response
	OracleRegisterRequestExecute(r ApiOracleRegisterRequestRequest) (*OracleRegisterRequest200Response, *http.Response, error)

	/*
	OracleStatusRequest Get oracle task status

	Get oracle task status

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiOracleStatusRequestRequest
	*/
	OracleStatusRequest(ctx context.Context) ApiOracleStatusRequestRequest

	// OracleStatusRequestExecute executes the request
	//  @return OracleStatusRequest200Response
	OracleStatusRequestExecute(r ApiOracleStatusRequestRequest) (*OracleStatusRequest200Response, *http.Response, error)

	/*
	OracleUnregisterRequest Unregister data transfer task

	Unregister data transfer task from source to target blockchain

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiOracleUnregisterRequestRequest
	*/
	OracleUnregisterRequest(ctx context.Context) ApiOracleUnregisterRequestRequest

	// OracleUnregisterRequestExecute executes the request
	//  @return OracleUnregisterRequest200Response
	OracleUnregisterRequestExecute(r ApiOracleUnregisterRequestRequest) (*OracleUnregisterRequest200Response, *http.Response, error)
}

// OracleApiService OracleApi service
type OracleApiService service

type ApiOracleExecuteRequestRequest struct {
	ctx context.Context
	ApiService OracleApi
	oracleExecuteRequestRequest *OracleExecuteRequestRequest
}

func (r ApiOracleExecuteRequestRequest) OracleExecuteRequestRequest(oracleExecuteRequestRequest OracleExecuteRequestRequest) ApiOracleExecuteRequestRequest {
	r.oracleExecuteRequestRequest = &oracleExecuteRequestRequest
	return r
}

func (r ApiOracleExecuteRequestRequest) Execute() (*OracleExecuteRequest200Response, *http.Response, error) {
	return r.ApiService.OracleExecuteRequestExecute(r)
}

/*
OracleExecuteRequest Execute data transfer task

Execute a registered data transfer task from source to target blockchain

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiOracleExecuteRequestRequest
*/
func (a *OracleApiService) OracleExecuteRequest(ctx context.Context) ApiOracleExecuteRequestRequest {
	return ApiOracleExecuteRequestRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return OracleExecuteRequest200Response
func (a *OracleApiService) OracleExecuteRequestExecute(r ApiOracleExecuteRequestRequest) (*OracleExecuteRequest200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *OracleExecuteRequest200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OracleApiService.OracleExecuteRequest")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/@hyperledger/cactus-plugin-satp-hermes/oracle/execute"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.oracleExecuteRequestRequest == nil {
		return localVarReturnValue, nil, reportError("oracleExecuteRequestRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.oracleExecuteRequestRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiOracleRegisterRequestRequest struct {
	ctx context.Context
	ApiService OracleApi
	oracleRegisterRequestRequest *OracleRegisterRequestRequest
}

func (r ApiOracleRegisterRequestRequest) OracleRegisterRequestRequest(oracleRegisterRequestRequest OracleRegisterRequestRequest) ApiOracleRegisterRequestRequest {
	r.oracleRegisterRequestRequest = &oracleRegisterRequestRequest
	return r
}

func (r ApiOracleRegisterRequestRequest) Execute() (*OracleRegisterRequest200Response, *http.Response, error) {
	return r.ApiService.OracleRegisterRequestExecute(r)
}

/*
OracleRegisterRequest Register data transfer task

Register data transfer from source to target blockchain

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiOracleRegisterRequestRequest
*/
func (a *OracleApiService) OracleRegisterRequest(ctx context.Context) ApiOracleRegisterRequestRequest {
	return ApiOracleRegisterRequestRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return OracleRegisterRequest200Response
func (a *OracleApiService) OracleRegisterRequestExecute(r ApiOracleRegisterRequestRequest) (*OracleRegisterRequest200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *OracleRegisterRequest200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OracleApiService.OracleRegisterRequest")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/@hyperledger/cactus-plugin-satp-hermes/oracle/register"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.oracleRegisterRequestRequest == nil {
		return localVarReturnValue, nil, reportError("oracleRegisterRequestRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.oracleRegisterRequestRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiOracleStatusRequestRequest struct {
	ctx context.Context
	ApiService OracleApi
	oracleStatusRequestRequest *OracleStatusRequestRequest
}

func (r ApiOracleStatusRequestRequest) OracleStatusRequestRequest(oracleStatusRequestRequest OracleStatusRequestRequest) ApiOracleStatusRequestRequest {
	r.oracleStatusRequestRequest = &oracleStatusRequestRequest
	return r
}

func (r ApiOracleStatusRequestRequest) Execute() (*OracleStatusRequest200Response, *http.Response, error) {
	return r.ApiService.OracleStatusRequestExecute(r)
}

/*
OracleStatusRequest Get oracle task status

Get oracle task status

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiOracleStatusRequestRequest
*/
func (a *OracleApiService) OracleStatusRequest(ctx context.Context) ApiOracleStatusRequestRequest {
	return ApiOracleStatusRequestRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return OracleStatusRequest200Response
func (a *OracleApiService) OracleStatusRequestExecute(r ApiOracleStatusRequestRequest) (*OracleStatusRequest200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *OracleStatusRequest200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OracleApiService.OracleStatusRequest")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/@hyperledger/cactus-plugin-satp-hermes/oracle/status"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.oracleStatusRequestRequest == nil {
		return localVarReturnValue, nil, reportError("oracleStatusRequestRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.oracleStatusRequestRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiOracleUnregisterRequestRequest struct {
	ctx context.Context
	ApiService OracleApi
	oracleUnregisterRequestRequest *OracleUnregisterRequestRequest
}

func (r ApiOracleUnregisterRequestRequest) OracleUnregisterRequestRequest(oracleUnregisterRequestRequest OracleUnregisterRequestRequest) ApiOracleUnregisterRequestRequest {
	r.oracleUnregisterRequestRequest = &oracleUnregisterRequestRequest
	return r
}

func (r ApiOracleUnregisterRequestRequest) Execute() (*OracleUnregisterRequest200Response, *http.Response, error) {
	return r.ApiService.OracleUnregisterRequestExecute(r)
}

/*
OracleUnregisterRequest Unregister data transfer task

Unregister data transfer task from source to target blockchain

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiOracleUnregisterRequestRequest
*/
func (a *OracleApiService) OracleUnregisterRequest(ctx context.Context) ApiOracleUnregisterRequestRequest {
	return ApiOracleUnregisterRequestRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return OracleUnregisterRequest200Response
func (a *OracleApiService) OracleUnregisterRequestExecute(r ApiOracleUnregisterRequestRequest) (*OracleUnregisterRequest200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *OracleUnregisterRequest200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OracleApiService.OracleUnregisterRequest")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/@hyperledger/cactus-plugin-satp-hermes/oracle/unregister"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.oracleUnregisterRequestRequest == nil {
		return localVarReturnValue, nil, reportError("oracleUnregisterRequestRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.oracleUnregisterRequestRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
