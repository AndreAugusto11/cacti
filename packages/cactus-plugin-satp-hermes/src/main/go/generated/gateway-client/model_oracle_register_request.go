/*
SATP Gateway Client (Business Logic Orchestrator)

SATP is a protocol operating between two gateways that conducts the transfer of a digital asset from one gateway to another. The protocol establishes a secure channel between the endpoints and implements a 2-phase commit to ensure the properties of transfer atomicity, consistency, isolation and durability.  This API defines the gateway client facing API (business logic orchestrator, or BLO), which is named API-Type 1 in the SATP-Core specification.  **Additional Resources**: - [Proposed SATP Charter](https://datatracker.ietf.org/doc/charter-ietf-satp/) - [SATP Core draft](https://datatracker.ietf.org/doc/draft-ietf-satp-core) - [SATP Crash Recovery draft](https://datatracker.ietf.org/doc/draft-belchior-satp-gateway-recovery/) - [SATP Architecture draft](https://datatracker.ietf.org/doc/draft-ietf-satp-architecture/) - [SATP Use-Cases draft](https://datatracker.ietf.org/doc/draft-ramakrishna-sat-use-cases/) - [SATP Data sharing draft](https://datatracker.ietf.org/doc/draft-ramakrishna-satp-data-sharing) - [SATP View Addresses draft](https://datatracker.ietf.org/doc/draft-ramakrishna-satp-views-addresses)

API version: 0.0.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package generated

import (
	"encoding/json"
)

// checks if the OracleRegisterRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OracleRegisterRequest{}

// OracleRegisterRequest Request schema for registering a data transfer task. Includes details such as the source and destination DLT networks and contracts.
type OracleRegisterRequest struct {
	ContextID string `json:"contextID"`
	OriginNetwork Transact200ResponseStatusResponseOriginNetwork `json:"originNetwork"`
	DestinationNetwork *Transact200ResponseStatusResponseDestinationNetwork `json:"destinationNetwork,omitempty"`
	OriginContract OracleStatusRequest200ResponseOriginContract `json:"originContract"`
	DestinationContract *OracleExecuteRequestRequestDestinationContract `json:"destinationContract,omitempty"`
	EventOfInterest *OracleStatusRequest200ResponseEventOfInterest `json:"eventOfInterest,omitempty"`
	WriteFunction *OracleExecuteRequestRequestWriteFunction `json:"writeFunction,omitempty"`
}

// NewOracleRegisterRequest instantiates a new OracleRegisterRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOracleRegisterRequest(contextID string, originNetwork Transact200ResponseStatusResponseOriginNetwork, originContract OracleStatusRequest200ResponseOriginContract) *OracleRegisterRequest {
	this := OracleRegisterRequest{}
	this.ContextID = contextID
	this.OriginNetwork = originNetwork
	this.OriginContract = originContract
	return &this
}

// NewOracleRegisterRequestWithDefaults instantiates a new OracleRegisterRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOracleRegisterRequestWithDefaults() *OracleRegisterRequest {
	this := OracleRegisterRequest{}
	return &this
}

// GetContextID returns the ContextID field value
func (o *OracleRegisterRequest) GetContextID() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ContextID
}

// GetContextIDOk returns a tuple with the ContextID field value
// and a boolean to check if the value has been set.
func (o *OracleRegisterRequest) GetContextIDOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ContextID, true
}

// SetContextID sets field value
func (o *OracleRegisterRequest) SetContextID(v string) {
	o.ContextID = v
}

// GetOriginNetwork returns the OriginNetwork field value
func (o *OracleRegisterRequest) GetOriginNetwork() Transact200ResponseStatusResponseOriginNetwork {
	if o == nil {
		var ret Transact200ResponseStatusResponseOriginNetwork
		return ret
	}

	return o.OriginNetwork
}

// GetOriginNetworkOk returns a tuple with the OriginNetwork field value
// and a boolean to check if the value has been set.
func (o *OracleRegisterRequest) GetOriginNetworkOk() (*Transact200ResponseStatusResponseOriginNetwork, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OriginNetwork, true
}

// SetOriginNetwork sets field value
func (o *OracleRegisterRequest) SetOriginNetwork(v Transact200ResponseStatusResponseOriginNetwork) {
	o.OriginNetwork = v
}

// GetDestinationNetwork returns the DestinationNetwork field value if set, zero value otherwise.
func (o *OracleRegisterRequest) GetDestinationNetwork() Transact200ResponseStatusResponseDestinationNetwork {
	if o == nil || IsNil(o.DestinationNetwork) {
		var ret Transact200ResponseStatusResponseDestinationNetwork
		return ret
	}
	return *o.DestinationNetwork
}

// GetDestinationNetworkOk returns a tuple with the DestinationNetwork field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OracleRegisterRequest) GetDestinationNetworkOk() (*Transact200ResponseStatusResponseDestinationNetwork, bool) {
	if o == nil || IsNil(o.DestinationNetwork) {
		return nil, false
	}
	return o.DestinationNetwork, true
}

// HasDestinationNetwork returns a boolean if a field has been set.
func (o *OracleRegisterRequest) HasDestinationNetwork() bool {
	if o != nil && !IsNil(o.DestinationNetwork) {
		return true
	}

	return false
}

// SetDestinationNetwork gets a reference to the given Transact200ResponseStatusResponseDestinationNetwork and assigns it to the DestinationNetwork field.
func (o *OracleRegisterRequest) SetDestinationNetwork(v Transact200ResponseStatusResponseDestinationNetwork) {
	o.DestinationNetwork = &v
}

// GetOriginContract returns the OriginContract field value
func (o *OracleRegisterRequest) GetOriginContract() OracleStatusRequest200ResponseOriginContract {
	if o == nil {
		var ret OracleStatusRequest200ResponseOriginContract
		return ret
	}

	return o.OriginContract
}

// GetOriginContractOk returns a tuple with the OriginContract field value
// and a boolean to check if the value has been set.
func (o *OracleRegisterRequest) GetOriginContractOk() (*OracleStatusRequest200ResponseOriginContract, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OriginContract, true
}

// SetOriginContract sets field value
func (o *OracleRegisterRequest) SetOriginContract(v OracleStatusRequest200ResponseOriginContract) {
	o.OriginContract = v
}

// GetDestinationContract returns the DestinationContract field value if set, zero value otherwise.
func (o *OracleRegisterRequest) GetDestinationContract() OracleExecuteRequestRequestDestinationContract {
	if o == nil || IsNil(o.DestinationContract) {
		var ret OracleExecuteRequestRequestDestinationContract
		return ret
	}
	return *o.DestinationContract
}

// GetDestinationContractOk returns a tuple with the DestinationContract field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OracleRegisterRequest) GetDestinationContractOk() (*OracleExecuteRequestRequestDestinationContract, bool) {
	if o == nil || IsNil(o.DestinationContract) {
		return nil, false
	}
	return o.DestinationContract, true
}

// HasDestinationContract returns a boolean if a field has been set.
func (o *OracleRegisterRequest) HasDestinationContract() bool {
	if o != nil && !IsNil(o.DestinationContract) {
		return true
	}

	return false
}

// SetDestinationContract gets a reference to the given OracleExecuteRequestRequestDestinationContract and assigns it to the DestinationContract field.
func (o *OracleRegisterRequest) SetDestinationContract(v OracleExecuteRequestRequestDestinationContract) {
	o.DestinationContract = &v
}

// GetEventOfInterest returns the EventOfInterest field value if set, zero value otherwise.
func (o *OracleRegisterRequest) GetEventOfInterest() OracleStatusRequest200ResponseEventOfInterest {
	if o == nil || IsNil(o.EventOfInterest) {
		var ret OracleStatusRequest200ResponseEventOfInterest
		return ret
	}
	return *o.EventOfInterest
}

// GetEventOfInterestOk returns a tuple with the EventOfInterest field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OracleRegisterRequest) GetEventOfInterestOk() (*OracleStatusRequest200ResponseEventOfInterest, bool) {
	if o == nil || IsNil(o.EventOfInterest) {
		return nil, false
	}
	return o.EventOfInterest, true
}

// HasEventOfInterest returns a boolean if a field has been set.
func (o *OracleRegisterRequest) HasEventOfInterest() bool {
	if o != nil && !IsNil(o.EventOfInterest) {
		return true
	}

	return false
}

// SetEventOfInterest gets a reference to the given OracleStatusRequest200ResponseEventOfInterest and assigns it to the EventOfInterest field.
func (o *OracleRegisterRequest) SetEventOfInterest(v OracleStatusRequest200ResponseEventOfInterest) {
	o.EventOfInterest = &v
}

// GetWriteFunction returns the WriteFunction field value if set, zero value otherwise.
func (o *OracleRegisterRequest) GetWriteFunction() OracleExecuteRequestRequestWriteFunction {
	if o == nil || IsNil(o.WriteFunction) {
		var ret OracleExecuteRequestRequestWriteFunction
		return ret
	}
	return *o.WriteFunction
}

// GetWriteFunctionOk returns a tuple with the WriteFunction field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OracleRegisterRequest) GetWriteFunctionOk() (*OracleExecuteRequestRequestWriteFunction, bool) {
	if o == nil || IsNil(o.WriteFunction) {
		return nil, false
	}
	return o.WriteFunction, true
}

// HasWriteFunction returns a boolean if a field has been set.
func (o *OracleRegisterRequest) HasWriteFunction() bool {
	if o != nil && !IsNil(o.WriteFunction) {
		return true
	}

	return false
}

// SetWriteFunction gets a reference to the given OracleExecuteRequestRequestWriteFunction and assigns it to the WriteFunction field.
func (o *OracleRegisterRequest) SetWriteFunction(v OracleExecuteRequestRequestWriteFunction) {
	o.WriteFunction = &v
}

func (o OracleRegisterRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OracleRegisterRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["contextID"] = o.ContextID
	toSerialize["originNetwork"] = o.OriginNetwork
	if !IsNil(o.DestinationNetwork) {
		toSerialize["destinationNetwork"] = o.DestinationNetwork
	}
	toSerialize["originContract"] = o.OriginContract
	if !IsNil(o.DestinationContract) {
		toSerialize["destinationContract"] = o.DestinationContract
	}
	if !IsNil(o.EventOfInterest) {
		toSerialize["eventOfInterest"] = o.EventOfInterest
	}
	if !IsNil(o.WriteFunction) {
		toSerialize["writeFunction"] = o.WriteFunction
	}
	return toSerialize, nil
}

type NullableOracleRegisterRequest struct {
	value *OracleRegisterRequest
	isSet bool
}

func (v NullableOracleRegisterRequest) Get() *OracleRegisterRequest {
	return v.value
}

func (v *NullableOracleRegisterRequest) Set(val *OracleRegisterRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableOracleRegisterRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableOracleRegisterRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOracleRegisterRequest(val *OracleRegisterRequest) *NullableOracleRegisterRequest {
	return &NullableOracleRegisterRequest{value: val, isSet: true}
}

func (v NullableOracleRegisterRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOracleRegisterRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


