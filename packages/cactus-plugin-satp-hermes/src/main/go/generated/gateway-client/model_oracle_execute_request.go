/*
SATP Gateway Client (Business Logic Orchestrator)

SATP is a protocol operating between two gateways that conducts the transfer of a digital asset from one gateway to another. The protocol establishes a secure channel between the endpoints and implements a 2-phase commit to ensure the properties of transfer atomicity, consistency, isolation and durability.  This API defines the gateway client facing API (business logic orchestrator, or BLO), which is named API-Type 1 in the SATP-Core specification.  **Additional Resources**: - [Proposed SATP Charter](https://datatracker.ietf.org/doc/charter-ietf-satp/) - [SATP Core draft](https://datatracker.ietf.org/doc/draft-ietf-satp-core) - [SATP Crash Recovery draft](https://datatracker.ietf.org/doc/draft-belchior-satp-gateway-recovery/) - [SATP Architecture draft](https://datatracker.ietf.org/doc/draft-ietf-satp-architecture/) - [SATP Use-Cases draft](https://datatracker.ietf.org/doc/draft-ramakrishna-sat-use-cases/) - [SATP Data sharing draft](https://datatracker.ietf.org/doc/draft-ramakrishna-satp-data-sharing) - [SATP View Addresses draft](https://datatracker.ietf.org/doc/draft-ramakrishna-satp-views-addresses)

API version: 0.0.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package generated

import (
	"encoding/json"
)

// checks if the OracleExecuteRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OracleExecuteRequest{}

// OracleExecuteRequest Request schema for triggering an immediate transfer task. Includes the task ID, payload, and destination network and contract details.
type OracleExecuteRequest struct {
	// The unique identifier for the transfer task.
	TaskID string `json:"taskID"`
	// The payload to be written to the destination contract.
	Payload string `json:"payload"`
	DestinationNetwork Transact200ResponseStatusResponseDestinationNetwork `json:"destinationNetwork"`
	DestinationContract OracleExecuteRequestRequestDestinationContract `json:"destinationContract"`
	WriteFunction OracleExecuteRequestRequestWriteFunction `json:"writeFunction"`
}

// NewOracleExecuteRequest instantiates a new OracleExecuteRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOracleExecuteRequest(taskID string, payload string, destinationNetwork Transact200ResponseStatusResponseDestinationNetwork, destinationContract OracleExecuteRequestRequestDestinationContract, writeFunction OracleExecuteRequestRequestWriteFunction) *OracleExecuteRequest {
	this := OracleExecuteRequest{}
	this.TaskID = taskID
	this.Payload = payload
	this.DestinationNetwork = destinationNetwork
	this.DestinationContract = destinationContract
	this.WriteFunction = writeFunction
	return &this
}

// NewOracleExecuteRequestWithDefaults instantiates a new OracleExecuteRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOracleExecuteRequestWithDefaults() *OracleExecuteRequest {
	this := OracleExecuteRequest{}
	return &this
}

// GetTaskID returns the TaskID field value
func (o *OracleExecuteRequest) GetTaskID() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TaskID
}

// GetTaskIDOk returns a tuple with the TaskID field value
// and a boolean to check if the value has been set.
func (o *OracleExecuteRequest) GetTaskIDOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TaskID, true
}

// SetTaskID sets field value
func (o *OracleExecuteRequest) SetTaskID(v string) {
	o.TaskID = v
}

// GetPayload returns the Payload field value
func (o *OracleExecuteRequest) GetPayload() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Payload
}

// GetPayloadOk returns a tuple with the Payload field value
// and a boolean to check if the value has been set.
func (o *OracleExecuteRequest) GetPayloadOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Payload, true
}

// SetPayload sets field value
func (o *OracleExecuteRequest) SetPayload(v string) {
	o.Payload = v
}

// GetDestinationNetwork returns the DestinationNetwork field value
func (o *OracleExecuteRequest) GetDestinationNetwork() Transact200ResponseStatusResponseDestinationNetwork {
	if o == nil {
		var ret Transact200ResponseStatusResponseDestinationNetwork
		return ret
	}

	return o.DestinationNetwork
}

// GetDestinationNetworkOk returns a tuple with the DestinationNetwork field value
// and a boolean to check if the value has been set.
func (o *OracleExecuteRequest) GetDestinationNetworkOk() (*Transact200ResponseStatusResponseDestinationNetwork, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DestinationNetwork, true
}

// SetDestinationNetwork sets field value
func (o *OracleExecuteRequest) SetDestinationNetwork(v Transact200ResponseStatusResponseDestinationNetwork) {
	o.DestinationNetwork = v
}

// GetDestinationContract returns the DestinationContract field value
func (o *OracleExecuteRequest) GetDestinationContract() OracleExecuteRequestRequestDestinationContract {
	if o == nil {
		var ret OracleExecuteRequestRequestDestinationContract
		return ret
	}

	return o.DestinationContract
}

// GetDestinationContractOk returns a tuple with the DestinationContract field value
// and a boolean to check if the value has been set.
func (o *OracleExecuteRequest) GetDestinationContractOk() (*OracleExecuteRequestRequestDestinationContract, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DestinationContract, true
}

// SetDestinationContract sets field value
func (o *OracleExecuteRequest) SetDestinationContract(v OracleExecuteRequestRequestDestinationContract) {
	o.DestinationContract = v
}

// GetWriteFunction returns the WriteFunction field value
func (o *OracleExecuteRequest) GetWriteFunction() OracleExecuteRequestRequestWriteFunction {
	if o == nil {
		var ret OracleExecuteRequestRequestWriteFunction
		return ret
	}

	return o.WriteFunction
}

// GetWriteFunctionOk returns a tuple with the WriteFunction field value
// and a boolean to check if the value has been set.
func (o *OracleExecuteRequest) GetWriteFunctionOk() (*OracleExecuteRequestRequestWriteFunction, bool) {
	if o == nil {
		return nil, false
	}
	return &o.WriteFunction, true
}

// SetWriteFunction sets field value
func (o *OracleExecuteRequest) SetWriteFunction(v OracleExecuteRequestRequestWriteFunction) {
	o.WriteFunction = v
}

func (o OracleExecuteRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OracleExecuteRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["taskID"] = o.TaskID
	toSerialize["payload"] = o.Payload
	toSerialize["destinationNetwork"] = o.DestinationNetwork
	toSerialize["destinationContract"] = o.DestinationContract
	toSerialize["writeFunction"] = o.WriteFunction
	return toSerialize, nil
}

type NullableOracleExecuteRequest struct {
	value *OracleExecuteRequest
	isSet bool
}

func (v NullableOracleExecuteRequest) Get() *OracleExecuteRequest {
	return v.value
}

func (v *NullableOracleExecuteRequest) Set(val *OracleExecuteRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableOracleExecuteRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableOracleExecuteRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOracleExecuteRequest(val *OracleExecuteRequest) *NullableOracleExecuteRequest {
	return &NullableOracleExecuteRequest{value: val, isSet: true}
}

func (v NullableOracleExecuteRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOracleExecuteRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


