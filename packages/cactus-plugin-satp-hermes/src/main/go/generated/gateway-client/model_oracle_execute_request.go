/*
SATP Gateway Client (Business Logic Orchestrator)

SATP is a protocol operating between two gateways that conducts the transfer of a digital asset from one gateway to another. The protocol establishes a secure channel between the endpoints and implements a 2-phase commit to ensure the properties of transfer atomicity, consistency, isolation and durability.  This API defines the gateway client facing API (business logic orchestrator, or BLO), which is named API-Type 1 in the SATP-Core specification.  **Additional Resources**: - [Proposed SATP Charter](https://datatracker.ietf.org/doc/charter-ietf-satp/) - [SATP Core draft](https://datatracker.ietf.org/doc/draft-ietf-satp-core) - [SATP Crash Recovery draft](https://datatracker.ietf.org/doc/draft-belchior-satp-gateway-recovery/) - [SATP Architecture draft](https://datatracker.ietf.org/doc/draft-ietf-satp-architecture/) - [SATP Use-Cases draft](https://datatracker.ietf.org/doc/draft-ramakrishna-sat-use-cases/) - [SATP Data sharing draft](https://datatracker.ietf.org/doc/draft-ramakrishna-satp-data-sharing) - [SATP View Addresses draft](https://datatracker.ietf.org/doc/draft-ramakrishna-satp-views-addresses)

API version: 0.0.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package generated

import (
	"encoding/json"
)

// checks if the OracleExecuteRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OracleExecuteRequest{}

// OracleExecuteRequest Request schema for triggering an immediate transfer task. Includes the task ID, payload, and destination network and contract details.
type OracleExecuteRequest struct {
	// The source blockchain network identifier. Only if taskType is READ or READ_AND_UPDATE.
	SourceNetwork *string `json:"sourceNetwork,omitempty"`
	// The target blockchain network identifier. Only if taskType is UPDATE or READ_AND_UPDATE.
	DestinationNetwork string `json:"destinationNetwork"`
	// The contract address on the source blockchain. Only if taskType is READ or READ_AND_UPDATE.
	SourceContract *string `json:"sourceContract,omitempty"`
	// The contract address on the destination blockchain. Only if taskType is UPDATE or READ_AND_UPDATE.
	DestinationContract string `json:"destinationContract"`
	// The function to be called on the source blockchain. Only if taskType is READ or READ_AND_UPDATE.
	ReadFunction *string `json:"readFunction,omitempty"`
	// The function to be called on the destination blockchain. Only if taskType is UPDATE or READ_AND_UPDATE.
	WriteFunction string `json:"writeFunction"`
	// The type of task to be registered.
	TaskType *string `json:"taskType,omitempty"`
}

// NewOracleExecuteRequest instantiates a new OracleExecuteRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOracleExecuteRequest(destinationNetwork string, destinationContract string, writeFunction string) *OracleExecuteRequest {
	this := OracleExecuteRequest{}
	this.DestinationNetwork = destinationNetwork
	this.DestinationContract = destinationContract
	this.WriteFunction = writeFunction
	return &this
}

// NewOracleExecuteRequestWithDefaults instantiates a new OracleExecuteRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOracleExecuteRequestWithDefaults() *OracleExecuteRequest {
	this := OracleExecuteRequest{}
	return &this
}

// GetSourceNetwork returns the SourceNetwork field value if set, zero value otherwise.
func (o *OracleExecuteRequest) GetSourceNetwork() string {
	if o == nil || IsNil(o.SourceNetwork) {
		var ret string
		return ret
	}
	return *o.SourceNetwork
}

// GetSourceNetworkOk returns a tuple with the SourceNetwork field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OracleExecuteRequest) GetSourceNetworkOk() (*string, bool) {
	if o == nil || IsNil(o.SourceNetwork) {
		return nil, false
	}
	return o.SourceNetwork, true
}

// HasSourceNetwork returns a boolean if a field has been set.
func (o *OracleExecuteRequest) HasSourceNetwork() bool {
	if o != nil && !IsNil(o.SourceNetwork) {
		return true
	}

	return false
}

// SetSourceNetwork gets a reference to the given string and assigns it to the SourceNetwork field.
func (o *OracleExecuteRequest) SetSourceNetwork(v string) {
	o.SourceNetwork = &v
}

// GetDestinationNetwork returns the DestinationNetwork field value
func (o *OracleExecuteRequest) GetDestinationNetwork() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DestinationNetwork
}

// GetDestinationNetworkOk returns a tuple with the DestinationNetwork field value
// and a boolean to check if the value has been set.
func (o *OracleExecuteRequest) GetDestinationNetworkOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DestinationNetwork, true
}

// SetDestinationNetwork sets field value
func (o *OracleExecuteRequest) SetDestinationNetwork(v string) {
	o.DestinationNetwork = v
}

// GetSourceContract returns the SourceContract field value if set, zero value otherwise.
func (o *OracleExecuteRequest) GetSourceContract() string {
	if o == nil || IsNil(o.SourceContract) {
		var ret string
		return ret
	}
	return *o.SourceContract
}

// GetSourceContractOk returns a tuple with the SourceContract field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OracleExecuteRequest) GetSourceContractOk() (*string, bool) {
	if o == nil || IsNil(o.SourceContract) {
		return nil, false
	}
	return o.SourceContract, true
}

// HasSourceContract returns a boolean if a field has been set.
func (o *OracleExecuteRequest) HasSourceContract() bool {
	if o != nil && !IsNil(o.SourceContract) {
		return true
	}

	return false
}

// SetSourceContract gets a reference to the given string and assigns it to the SourceContract field.
func (o *OracleExecuteRequest) SetSourceContract(v string) {
	o.SourceContract = &v
}

// GetDestinationContract returns the DestinationContract field value
func (o *OracleExecuteRequest) GetDestinationContract() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DestinationContract
}

// GetDestinationContractOk returns a tuple with the DestinationContract field value
// and a boolean to check if the value has been set.
func (o *OracleExecuteRequest) GetDestinationContractOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DestinationContract, true
}

// SetDestinationContract sets field value
func (o *OracleExecuteRequest) SetDestinationContract(v string) {
	o.DestinationContract = v
}

// GetReadFunction returns the ReadFunction field value if set, zero value otherwise.
func (o *OracleExecuteRequest) GetReadFunction() string {
	if o == nil || IsNil(o.ReadFunction) {
		var ret string
		return ret
	}
	return *o.ReadFunction
}

// GetReadFunctionOk returns a tuple with the ReadFunction field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OracleExecuteRequest) GetReadFunctionOk() (*string, bool) {
	if o == nil || IsNil(o.ReadFunction) {
		return nil, false
	}
	return o.ReadFunction, true
}

// HasReadFunction returns a boolean if a field has been set.
func (o *OracleExecuteRequest) HasReadFunction() bool {
	if o != nil && !IsNil(o.ReadFunction) {
		return true
	}

	return false
}

// SetReadFunction gets a reference to the given string and assigns it to the ReadFunction field.
func (o *OracleExecuteRequest) SetReadFunction(v string) {
	o.ReadFunction = &v
}

// GetWriteFunction returns the WriteFunction field value
func (o *OracleExecuteRequest) GetWriteFunction() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.WriteFunction
}

// GetWriteFunctionOk returns a tuple with the WriteFunction field value
// and a boolean to check if the value has been set.
func (o *OracleExecuteRequest) GetWriteFunctionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.WriteFunction, true
}

// SetWriteFunction sets field value
func (o *OracleExecuteRequest) SetWriteFunction(v string) {
	o.WriteFunction = v
}

// GetTaskType returns the TaskType field value if set, zero value otherwise.
func (o *OracleExecuteRequest) GetTaskType() string {
	if o == nil || IsNil(o.TaskType) {
		var ret string
		return ret
	}
	return *o.TaskType
}

// GetTaskTypeOk returns a tuple with the TaskType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OracleExecuteRequest) GetTaskTypeOk() (*string, bool) {
	if o == nil || IsNil(o.TaskType) {
		return nil, false
	}
	return o.TaskType, true
}

// HasTaskType returns a boolean if a field has been set.
func (o *OracleExecuteRequest) HasTaskType() bool {
	if o != nil && !IsNil(o.TaskType) {
		return true
	}

	return false
}

// SetTaskType gets a reference to the given string and assigns it to the TaskType field.
func (o *OracleExecuteRequest) SetTaskType(v string) {
	o.TaskType = &v
}

func (o OracleExecuteRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OracleExecuteRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.SourceNetwork) {
		toSerialize["sourceNetwork"] = o.SourceNetwork
	}
	toSerialize["destinationNetwork"] = o.DestinationNetwork
	if !IsNil(o.SourceContract) {
		toSerialize["sourceContract"] = o.SourceContract
	}
	toSerialize["destinationContract"] = o.DestinationContract
	if !IsNil(o.ReadFunction) {
		toSerialize["readFunction"] = o.ReadFunction
	}
	toSerialize["writeFunction"] = o.WriteFunction
	if !IsNil(o.TaskType) {
		toSerialize["taskType"] = o.TaskType
	}
	return toSerialize, nil
}

type NullableOracleExecuteRequest struct {
	value *OracleExecuteRequest
	isSet bool
}

func (v NullableOracleExecuteRequest) Get() *OracleExecuteRequest {
	return v.value
}

func (v *NullableOracleExecuteRequest) Set(val *OracleExecuteRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableOracleExecuteRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableOracleExecuteRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOracleExecuteRequest(val *OracleExecuteRequest) *NullableOracleExecuteRequest {
	return &NullableOracleExecuteRequest{value: val, isSet: true}
}

func (v NullableOracleExecuteRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOracleExecuteRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


