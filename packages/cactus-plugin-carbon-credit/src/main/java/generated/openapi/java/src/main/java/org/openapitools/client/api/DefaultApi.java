/*
 * Hyperledger Cactus Plugin - Carbon Credit
 * Implementation for Carbon Credit Plugin logic
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.GetAvailableTCO2sRequest;
import org.openapitools.client.model.GetAvailableTCO2sResponse;
import org.openapitools.client.model.GetPurchasePriceRequest;
import org.openapitools.client.model.GetPurchasePriceResponse;
import org.openapitools.client.model.GetTCO2MetadataRequest;
import org.openapitools.client.model.RandomBuyRequest;
import org.openapitools.client.model.RandomBuyResponse;
import org.openapitools.client.model.RetireRequest;
import org.openapitools.client.model.RetireResponse;
import org.openapitools.client.model.SpecificBuyRequest;
import org.openapitools.client.model.SpecificBuyResponse;
import org.openapitools.client.model.TCO2Metadata;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class DefaultApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DefaultApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DefaultApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for getAvailableTCO2sRequest
     * @param getAvailableTCO2sRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response with a list of available TCO2s. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAvailableTCO2sRequestCall(GetAvailableTCO2sRequest getAvailableTCO2sRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = getAvailableTCO2sRequest;

        // create path and map variables
        String localVarPath = "/api/v1/@hyperledger/cactus-plugin-carbon-credit/get-available-tco2s";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAvailableTCO2sRequestValidateBeforeCall(GetAvailableTCO2sRequest getAvailableTCO2sRequest, final ApiCallback _callback) throws ApiException {
        return getAvailableTCO2sRequestCall(getAvailableTCO2sRequest, _callback);

    }

    /**
     * 
     * Get a list of available TCO2s (Tokenized Carbon Offset Units).
     * @param getAvailableTCO2sRequest  (optional)
     * @return GetAvailableTCO2sResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response with a list of available TCO2s. </td><td>  -  </td></tr>
     </table>
     */
    public GetAvailableTCO2sResponse getAvailableTCO2sRequest(GetAvailableTCO2sRequest getAvailableTCO2sRequest) throws ApiException {
        ApiResponse<GetAvailableTCO2sResponse> localVarResp = getAvailableTCO2sRequestWithHttpInfo(getAvailableTCO2sRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * Get a list of available TCO2s (Tokenized Carbon Offset Units).
     * @param getAvailableTCO2sRequest  (optional)
     * @return ApiResponse&lt;GetAvailableTCO2sResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response with a list of available TCO2s. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetAvailableTCO2sResponse> getAvailableTCO2sRequestWithHttpInfo(GetAvailableTCO2sRequest getAvailableTCO2sRequest) throws ApiException {
        okhttp3.Call localVarCall = getAvailableTCO2sRequestValidateBeforeCall(getAvailableTCO2sRequest, null);
        Type localVarReturnType = new TypeToken<GetAvailableTCO2sResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get a list of available TCO2s (Tokenized Carbon Offset Units).
     * @param getAvailableTCO2sRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response with a list of available TCO2s. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAvailableTCO2sRequestAsync(GetAvailableTCO2sRequest getAvailableTCO2sRequest, final ApiCallback<GetAvailableTCO2sResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAvailableTCO2sRequestValidateBeforeCall(getAvailableTCO2sRequest, _callback);
        Type localVarReturnType = new TypeToken<GetAvailableTCO2sResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPurchasePriceRequest
     * @param getPurchasePriceRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response with the purchase price. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPurchasePriceRequestCall(GetPurchasePriceRequest getPurchasePriceRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = getPurchasePriceRequest;

        // create path and map variables
        String localVarPath = "/api/v1/@hyperledger/cactus-plugin-carbon-credit/get-purchase-price";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPurchasePriceRequestValidateBeforeCall(GetPurchasePriceRequest getPurchasePriceRequest, final ApiCallback _callback) throws ApiException {
        return getPurchasePriceRequestCall(getPurchasePriceRequest, _callback);

    }

    /**
     * 
     * Get the purchase price for a specific TCO2.
     * @param getPurchasePriceRequest  (optional)
     * @return GetPurchasePriceResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response with the purchase price. </td><td>  -  </td></tr>
     </table>
     */
    public GetPurchasePriceResponse getPurchasePriceRequest(GetPurchasePriceRequest getPurchasePriceRequest) throws ApiException {
        ApiResponse<GetPurchasePriceResponse> localVarResp = getPurchasePriceRequestWithHttpInfo(getPurchasePriceRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * Get the purchase price for a specific TCO2.
     * @param getPurchasePriceRequest  (optional)
     * @return ApiResponse&lt;GetPurchasePriceResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response with the purchase price. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetPurchasePriceResponse> getPurchasePriceRequestWithHttpInfo(GetPurchasePriceRequest getPurchasePriceRequest) throws ApiException {
        okhttp3.Call localVarCall = getPurchasePriceRequestValidateBeforeCall(getPurchasePriceRequest, null);
        Type localVarReturnType = new TypeToken<GetPurchasePriceResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get the purchase price for a specific TCO2.
     * @param getPurchasePriceRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response with the purchase price. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPurchasePriceRequestAsync(GetPurchasePriceRequest getPurchasePriceRequest, final ApiCallback<GetPurchasePriceResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPurchasePriceRequestValidateBeforeCall(getPurchasePriceRequest, _callback);
        Type localVarReturnType = new TypeToken<GetPurchasePriceResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getTCO2MetadataRequest
     * @param getTCO2MetadataRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response with VCU metadata. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTCO2MetadataRequestCall(GetTCO2MetadataRequest getTCO2MetadataRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = getTCO2MetadataRequest;

        // create path and map variables
        String localVarPath = "/api/v1/@hyperledger/cactus-plugin-carbon-credit/get-tco2-metadata";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTCO2MetadataRequestValidateBeforeCall(GetTCO2MetadataRequest getTCO2MetadataRequest, final ApiCallback _callback) throws ApiException {
        return getTCO2MetadataRequestCall(getTCO2MetadataRequest, _callback);

    }

    /**
     * 
     * Get metadata for a specific TCO2.
     * @param getTCO2MetadataRequest  (optional)
     * @return TCO2Metadata
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response with VCU metadata. </td><td>  -  </td></tr>
     </table>
     */
    public TCO2Metadata getTCO2MetadataRequest(GetTCO2MetadataRequest getTCO2MetadataRequest) throws ApiException {
        ApiResponse<TCO2Metadata> localVarResp = getTCO2MetadataRequestWithHttpInfo(getTCO2MetadataRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * Get metadata for a specific TCO2.
     * @param getTCO2MetadataRequest  (optional)
     * @return ApiResponse&lt;TCO2Metadata&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response with VCU metadata. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TCO2Metadata> getTCO2MetadataRequestWithHttpInfo(GetTCO2MetadataRequest getTCO2MetadataRequest) throws ApiException {
        okhttp3.Call localVarCall = getTCO2MetadataRequestValidateBeforeCall(getTCO2MetadataRequest, null);
        Type localVarReturnType = new TypeToken<TCO2Metadata>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get metadata for a specific TCO2.
     * @param getTCO2MetadataRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response with VCU metadata. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTCO2MetadataRequestAsync(GetTCO2MetadataRequest getTCO2MetadataRequest, final ApiCallback<TCO2Metadata> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTCO2MetadataRequestValidateBeforeCall(getTCO2MetadataRequest, _callback);
        Type localVarReturnType = new TypeToken<TCO2Metadata>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for randomBuyRequest
     * @param randomBuyRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call randomBuyRequestCall(RandomBuyRequest randomBuyRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = randomBuyRequest;

        // create path and map variables
        String localVarPath = "/api/v1/@hyperledger/cactus-plugin-carbon-credit/random-buy";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call randomBuyRequestValidateBeforeCall(RandomBuyRequest randomBuyRequest, final ApiCallback _callback) throws ApiException {
        return randomBuyRequestCall(randomBuyRequest, _callback);

    }

    /**
     * 
     * Acquire a random basket of TCO2s from a marketplace.
     * @param randomBuyRequest  (optional)
     * @return RandomBuyResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public RandomBuyResponse randomBuyRequest(RandomBuyRequest randomBuyRequest) throws ApiException {
        ApiResponse<RandomBuyResponse> localVarResp = randomBuyRequestWithHttpInfo(randomBuyRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * Acquire a random basket of TCO2s from a marketplace.
     * @param randomBuyRequest  (optional)
     * @return ApiResponse&lt;RandomBuyResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RandomBuyResponse> randomBuyRequestWithHttpInfo(RandomBuyRequest randomBuyRequest) throws ApiException {
        okhttp3.Call localVarCall = randomBuyRequestValidateBeforeCall(randomBuyRequest, null);
        Type localVarReturnType = new TypeToken<RandomBuyResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Acquire a random basket of TCO2s from a marketplace.
     * @param randomBuyRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call randomBuyRequestAsync(RandomBuyRequest randomBuyRequest, final ApiCallback<RandomBuyResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = randomBuyRequestValidateBeforeCall(randomBuyRequest, _callback);
        Type localVarReturnType = new TypeToken<RandomBuyResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for retireRequest
     * @param retireRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call retireRequestCall(RetireRequest retireRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = retireRequest;

        // create path and map variables
        String localVarPath = "/api/v1/@hyperledger/cactus-plugin-carbon-credit/retire";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call retireRequestValidateBeforeCall(RetireRequest retireRequest, final ApiCallback _callback) throws ApiException {
        return retireRequestCall(retireRequest, _callback);

    }

    /**
     * 
     * Retire a specific basket of TCO2s on a marketplace.
     * @param retireRequest  (optional)
     * @return RetireResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public RetireResponse retireRequest(RetireRequest retireRequest) throws ApiException {
        ApiResponse<RetireResponse> localVarResp = retireRequestWithHttpInfo(retireRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * Retire a specific basket of TCO2s on a marketplace.
     * @param retireRequest  (optional)
     * @return ApiResponse&lt;RetireResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RetireResponse> retireRequestWithHttpInfo(RetireRequest retireRequest) throws ApiException {
        okhttp3.Call localVarCall = retireRequestValidateBeforeCall(retireRequest, null);
        Type localVarReturnType = new TypeToken<RetireResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retire a specific basket of TCO2s on a marketplace.
     * @param retireRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call retireRequestAsync(RetireRequest retireRequest, final ApiCallback<RetireResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = retireRequestValidateBeforeCall(retireRequest, _callback);
        Type localVarReturnType = new TypeToken<RetireResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for specificBuyRequest
     * @param specificBuyRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call specificBuyRequestCall(SpecificBuyRequest specificBuyRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = specificBuyRequest;

        // create path and map variables
        String localVarPath = "/api/v1/@hyperledger/cactus-plugin-carbon-credit/specific-buy";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call specificBuyRequestValidateBeforeCall(SpecificBuyRequest specificBuyRequest, final ApiCallback _callback) throws ApiException {
        return specificBuyRequestCall(specificBuyRequest, _callback);

    }

    /**
     * 
     * Acquire a specific basket of TCO2s from a marketplace.
     * @param specificBuyRequest  (optional)
     * @return SpecificBuyResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public SpecificBuyResponse specificBuyRequest(SpecificBuyRequest specificBuyRequest) throws ApiException {
        ApiResponse<SpecificBuyResponse> localVarResp = specificBuyRequestWithHttpInfo(specificBuyRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * Acquire a specific basket of TCO2s from a marketplace.
     * @param specificBuyRequest  (optional)
     * @return ApiResponse&lt;SpecificBuyResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SpecificBuyResponse> specificBuyRequestWithHttpInfo(SpecificBuyRequest specificBuyRequest) throws ApiException {
        okhttp3.Call localVarCall = specificBuyRequestValidateBeforeCall(specificBuyRequest, null);
        Type localVarReturnType = new TypeToken<SpecificBuyResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Acquire a specific basket of TCO2s from a marketplace.
     * @param specificBuyRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call specificBuyRequestAsync(SpecificBuyRequest specificBuyRequest, final ApiCallback<SpecificBuyResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = specificBuyRequestValidateBeforeCall(specificBuyRequest, _callback);
        Type localVarReturnType = new TypeToken<SpecificBuyResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
