/*
 * Hyperledger Cactus Plugin - Carbon Credit
 * Implementation for Carbon Credit Plugin logic
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.client.model.Marketplace;
import org.openapitools.client.model.Network;
import org.openapitools.client.model.SpecificBuyRequestWalletObject;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * RetireRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-10-20T16:45:32.252160+01:00[Europe/Lisbon]")
public class RetireRequest {
  public static final String SERIALIZED_NAME_MARKETPLACE = "marketplace";
  @SerializedName(SERIALIZED_NAME_MARKETPLACE)
  private Marketplace marketplace;

  public static final String SERIALIZED_NAME_NETWORK = "network";
  @SerializedName(SERIALIZED_NAME_NETWORK)
  private Network network;

  public static final String SERIALIZED_NAME_ENTITY_NAME = "entityName";
  @SerializedName(SERIALIZED_NAME_ENTITY_NAME)
  private String entityName;

  public static final String SERIALIZED_NAME_TCO2S = "tco2s";
  @SerializedName(SERIALIZED_NAME_TCO2S)
  private List<String> tco2s = new ArrayList<>();

  public static final String SERIALIZED_NAME_AMOUNTS = "amounts";
  @SerializedName(SERIALIZED_NAME_AMOUNTS)
  private List<String> amounts = new ArrayList<>();

  public static final String SERIALIZED_NAME_BENEFICIARY_ADDRESS = "beneficiaryAddress";
  @SerializedName(SERIALIZED_NAME_BENEFICIARY_ADDRESS)
  private String beneficiaryAddress;

  public static final String SERIALIZED_NAME_BENEFICIARY_NAME = "beneficiaryName";
  @SerializedName(SERIALIZED_NAME_BENEFICIARY_NAME)
  private String beneficiaryName;

  public static final String SERIALIZED_NAME_MESSAGE = "message";
  @SerializedName(SERIALIZED_NAME_MESSAGE)
  private String message;

  public static final String SERIALIZED_NAME_RETIREMENT_REASON = "retirementReason";
  @SerializedName(SERIALIZED_NAME_RETIREMENT_REASON)
  private String retirementReason;

  public static final String SERIALIZED_NAME_WALLET_OBJECT = "walletObject";
  @SerializedName(SERIALIZED_NAME_WALLET_OBJECT)
  private SpecificBuyRequestWalletObject walletObject;

  public RetireRequest() {
  }

  public RetireRequest marketplace(Marketplace marketplace) {
    
    this.marketplace = marketplace;
    return this;
  }

   /**
   * Get marketplace
   * @return marketplace
  **/
  @javax.annotation.Nonnull
  public Marketplace getMarketplace() {
    return marketplace;
  }


  public void setMarketplace(Marketplace marketplace) {
    this.marketplace = marketplace;
  }


  public RetireRequest network(Network network) {
    
    this.network = network;
    return this;
  }

   /**
   * Get network
   * @return network
  **/
  @javax.annotation.Nonnull
  public Network getNetwork() {
    return network;
  }


  public void setNetwork(Network network) {
    this.network = network;
  }


  public RetireRequest entityName(String entityName) {
    
    this.entityName = entityName;
    return this;
  }

   /**
   * Get entityName
   * @return entityName
  **/
  @javax.annotation.Nonnull
  public String getEntityName() {
    return entityName;
  }


  public void setEntityName(String entityName) {
    this.entityName = entityName;
  }


  public RetireRequest tco2s(List<String> tco2s) {
    
    this.tco2s = tco2s;
    return this;
  }

  public RetireRequest addTco2sItem(String tco2sItem) {
    if (this.tco2s == null) {
      this.tco2s = new ArrayList<>();
    }
    this.tco2s.add(tco2sItem);
    return this;
  }

   /**
   * Get tco2s
   * @return tco2s
  **/
  @javax.annotation.Nonnull
  public List<String> getTco2s() {
    return tco2s;
  }


  public void setTco2s(List<String> tco2s) {
    this.tco2s = tco2s;
  }


  public RetireRequest amounts(List<String> amounts) {
    
    this.amounts = amounts;
    return this;
  }

  public RetireRequest addAmountsItem(String amountsItem) {
    if (this.amounts == null) {
      this.amounts = new ArrayList<>();
    }
    this.amounts.add(amountsItem);
    return this;
  }

   /**
   * Get amounts
   * @return amounts
  **/
  @javax.annotation.Nonnull
  public List<String> getAmounts() {
    return amounts;
  }


  public void setAmounts(List<String> amounts) {
    this.amounts = amounts;
  }


  public RetireRequest beneficiaryAddress(String beneficiaryAddress) {
    
    this.beneficiaryAddress = beneficiaryAddress;
    return this;
  }

   /**
   * Get beneficiaryAddress
   * @return beneficiaryAddress
  **/
  @javax.annotation.Nonnull
  public String getBeneficiaryAddress() {
    return beneficiaryAddress;
  }


  public void setBeneficiaryAddress(String beneficiaryAddress) {
    this.beneficiaryAddress = beneficiaryAddress;
  }


  public RetireRequest beneficiaryName(String beneficiaryName) {
    
    this.beneficiaryName = beneficiaryName;
    return this;
  }

   /**
   * Get beneficiaryName
   * @return beneficiaryName
  **/
  @javax.annotation.Nonnull
  public String getBeneficiaryName() {
    return beneficiaryName;
  }


  public void setBeneficiaryName(String beneficiaryName) {
    this.beneficiaryName = beneficiaryName;
  }


  public RetireRequest message(String message) {
    
    this.message = message;
    return this;
  }

   /**
   * Get message
   * @return message
  **/
  @javax.annotation.Nullable
  public String getMessage() {
    return message;
  }


  public void setMessage(String message) {
    this.message = message;
  }


  public RetireRequest retirementReason(String retirementReason) {
    
    this.retirementReason = retirementReason;
    return this;
  }

   /**
   * Get retirementReason
   * @return retirementReason
  **/
  @javax.annotation.Nonnull
  public String getRetirementReason() {
    return retirementReason;
  }


  public void setRetirementReason(String retirementReason) {
    this.retirementReason = retirementReason;
  }


  public RetireRequest walletObject(SpecificBuyRequestWalletObject walletObject) {
    
    this.walletObject = walletObject;
    return this;
  }

   /**
   * Get walletObject
   * @return walletObject
  **/
  @javax.annotation.Nonnull
  public SpecificBuyRequestWalletObject getWalletObject() {
    return walletObject;
  }


  public void setWalletObject(SpecificBuyRequestWalletObject walletObject) {
    this.walletObject = walletObject;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RetireRequest retireRequest = (RetireRequest) o;
    return Objects.equals(this.marketplace, retireRequest.marketplace) &&
        Objects.equals(this.network, retireRequest.network) &&
        Objects.equals(this.entityName, retireRequest.entityName) &&
        Objects.equals(this.tco2s, retireRequest.tco2s) &&
        Objects.equals(this.amounts, retireRequest.amounts) &&
        Objects.equals(this.beneficiaryAddress, retireRequest.beneficiaryAddress) &&
        Objects.equals(this.beneficiaryName, retireRequest.beneficiaryName) &&
        Objects.equals(this.message, retireRequest.message) &&
        Objects.equals(this.retirementReason, retireRequest.retirementReason) &&
        Objects.equals(this.walletObject, retireRequest.walletObject);
  }

  @Override
  public int hashCode() {
    return Objects.hash(marketplace, network, entityName, tco2s, amounts, beneficiaryAddress, beneficiaryName, message, retirementReason, walletObject);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RetireRequest {\n");
    sb.append("    marketplace: ").append(toIndentedString(marketplace)).append("\n");
    sb.append("    network: ").append(toIndentedString(network)).append("\n");
    sb.append("    entityName: ").append(toIndentedString(entityName)).append("\n");
    sb.append("    tco2s: ").append(toIndentedString(tco2s)).append("\n");
    sb.append("    amounts: ").append(toIndentedString(amounts)).append("\n");
    sb.append("    beneficiaryAddress: ").append(toIndentedString(beneficiaryAddress)).append("\n");
    sb.append("    beneficiaryName: ").append(toIndentedString(beneficiaryName)).append("\n");
    sb.append("    message: ").append(toIndentedString(message)).append("\n");
    sb.append("    retirementReason: ").append(toIndentedString(retirementReason)).append("\n");
    sb.append("    walletObject: ").append(toIndentedString(walletObject)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("marketplace");
    openapiFields.add("network");
    openapiFields.add("entityName");
    openapiFields.add("tco2s");
    openapiFields.add("amounts");
    openapiFields.add("beneficiaryAddress");
    openapiFields.add("beneficiaryName");
    openapiFields.add("message");
    openapiFields.add("retirementReason");
    openapiFields.add("walletObject");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("marketplace");
    openapiRequiredFields.add("network");
    openapiRequiredFields.add("entityName");
    openapiRequiredFields.add("tco2s");
    openapiRequiredFields.add("amounts");
    openapiRequiredFields.add("beneficiaryAddress");
    openapiRequiredFields.add("beneficiaryName");
    openapiRequiredFields.add("retirementReason");
    openapiRequiredFields.add("walletObject");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to RetireRequest
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!RetireRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RetireRequest is not found in the empty JSON string", RetireRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!RetireRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RetireRequest` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : RetireRequest.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("entityName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `entityName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("entityName").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("tco2s") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("tco2s").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `tco2s` to be an array in the JSON string but got `%s`", jsonObj.get("tco2s").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("amounts") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("amounts").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `amounts` to be an array in the JSON string but got `%s`", jsonObj.get("amounts").toString()));
      }
      if (!jsonObj.get("beneficiaryAddress").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `beneficiaryAddress` to be a primitive type in the JSON string but got `%s`", jsonObj.get("beneficiaryAddress").toString()));
      }
      if (!jsonObj.get("beneficiaryName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `beneficiaryName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("beneficiaryName").toString()));
      }
      if ((jsonObj.get("message") != null && !jsonObj.get("message").isJsonNull()) && !jsonObj.get("message").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `message` to be a primitive type in the JSON string but got `%s`", jsonObj.get("message").toString()));
      }
      if (!jsonObj.get("retirementReason").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `retirementReason` to be a primitive type in the JSON string but got `%s`", jsonObj.get("retirementReason").toString()));
      }
      // validate the required field `walletObject`
      SpecificBuyRequestWalletObject.validateJsonObject(jsonObj.getAsJsonObject("walletObject"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RetireRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RetireRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RetireRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RetireRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<RetireRequest>() {
           @Override
           public void write(JsonWriter out, RetireRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RetireRequest read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of RetireRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of RetireRequest
  * @throws IOException if the JSON string is invalid with respect to RetireRequest
  */
  public static RetireRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RetireRequest.class);
  }

 /**
  * Convert an instance of RetireRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

