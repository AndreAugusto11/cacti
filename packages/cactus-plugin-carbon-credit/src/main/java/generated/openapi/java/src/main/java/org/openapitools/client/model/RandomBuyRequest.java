/*
 * Hyperledger Cactus Plugin - Carbon Credit
 * Implementation for Carbon Credit Plugin logic
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import org.openapitools.client.model.Marketplace;
import org.openapitools.client.model.Network;
import org.openapitools.client.model.SpecificBuyRequestWalletObject;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * RandomBuyRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-10-15T20:54:09.533419+01:00[Europe/Lisbon]")
public class RandomBuyRequest {
  public static final String SERIALIZED_NAME_MARKETPLACE = "marketplace";
  @SerializedName(SERIALIZED_NAME_MARKETPLACE)
  private Marketplace marketplace;

  public static final String SERIALIZED_NAME_NETWORK = "network";
  @SerializedName(SERIALIZED_NAME_NETWORK)
  private Network network;

  public static final String SERIALIZED_NAME_PAYMENT_TOKEN = "paymentToken";
  @SerializedName(SERIALIZED_NAME_PAYMENT_TOKEN)
  private String paymentToken;

  public static final String SERIALIZED_NAME_AMOUNT = "amount";
  @SerializedName(SERIALIZED_NAME_AMOUNT)
  private String amount;

  public static final String SERIALIZED_NAME_WALLET_OBJECT = "walletObject";
  @SerializedName(SERIALIZED_NAME_WALLET_OBJECT)
  private SpecificBuyRequestWalletObject walletObject;

  public RandomBuyRequest() {
  }

  public RandomBuyRequest marketplace(Marketplace marketplace) {
    
    this.marketplace = marketplace;
    return this;
  }

   /**
   * Get marketplace
   * @return marketplace
  **/
  @javax.annotation.Nonnull
  public Marketplace getMarketplace() {
    return marketplace;
  }


  public void setMarketplace(Marketplace marketplace) {
    this.marketplace = marketplace;
  }


  public RandomBuyRequest network(Network network) {
    
    this.network = network;
    return this;
  }

   /**
   * Get network
   * @return network
  **/
  @javax.annotation.Nonnull
  public Network getNetwork() {
    return network;
  }


  public void setNetwork(Network network) {
    this.network = network;
  }


  public RandomBuyRequest paymentToken(String paymentToken) {
    
    this.paymentToken = paymentToken;
    return this;
  }

   /**
   * Get paymentToken
   * @return paymentToken
  **/
  @javax.annotation.Nullable
  public String getPaymentToken() {
    return paymentToken;
  }


  public void setPaymentToken(String paymentToken) {
    this.paymentToken = paymentToken;
  }


  public RandomBuyRequest amount(String amount) {
    
    this.amount = amount;
    return this;
  }

   /**
   * Get amount
   * @return amount
  **/
  @javax.annotation.Nonnull
  public String getAmount() {
    return amount;
  }


  public void setAmount(String amount) {
    this.amount = amount;
  }


  public RandomBuyRequest walletObject(SpecificBuyRequestWalletObject walletObject) {
    
    this.walletObject = walletObject;
    return this;
  }

   /**
   * Get walletObject
   * @return walletObject
  **/
  @javax.annotation.Nonnull
  public SpecificBuyRequestWalletObject getWalletObject() {
    return walletObject;
  }


  public void setWalletObject(SpecificBuyRequestWalletObject walletObject) {
    this.walletObject = walletObject;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RandomBuyRequest randomBuyRequest = (RandomBuyRequest) o;
    return Objects.equals(this.marketplace, randomBuyRequest.marketplace) &&
        Objects.equals(this.network, randomBuyRequest.network) &&
        Objects.equals(this.paymentToken, randomBuyRequest.paymentToken) &&
        Objects.equals(this.amount, randomBuyRequest.amount) &&
        Objects.equals(this.walletObject, randomBuyRequest.walletObject);
  }

  @Override
  public int hashCode() {
    return Objects.hash(marketplace, network, paymentToken, amount, walletObject);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RandomBuyRequest {\n");
    sb.append("    marketplace: ").append(toIndentedString(marketplace)).append("\n");
    sb.append("    network: ").append(toIndentedString(network)).append("\n");
    sb.append("    paymentToken: ").append(toIndentedString(paymentToken)).append("\n");
    sb.append("    amount: ").append(toIndentedString(amount)).append("\n");
    sb.append("    walletObject: ").append(toIndentedString(walletObject)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("marketplace");
    openapiFields.add("network");
    openapiFields.add("paymentToken");
    openapiFields.add("amount");
    openapiFields.add("walletObject");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("marketplace");
    openapiRequiredFields.add("network");
    openapiRequiredFields.add("amount");
    openapiRequiredFields.add("walletObject");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to RandomBuyRequest
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!RandomBuyRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RandomBuyRequest is not found in the empty JSON string", RandomBuyRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!RandomBuyRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RandomBuyRequest` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : RandomBuyRequest.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if ((jsonObj.get("paymentToken") != null && !jsonObj.get("paymentToken").isJsonNull()) && !jsonObj.get("paymentToken").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `paymentToken` to be a primitive type in the JSON string but got `%s`", jsonObj.get("paymentToken").toString()));
      }
      if (!jsonObj.get("amount").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `amount` to be a primitive type in the JSON string but got `%s`", jsonObj.get("amount").toString()));
      }
      // validate the required field `walletObject`
      SpecificBuyRequestWalletObject.validateJsonObject(jsonObj.getAsJsonObject("walletObject"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RandomBuyRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RandomBuyRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RandomBuyRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RandomBuyRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<RandomBuyRequest>() {
           @Override
           public void write(JsonWriter out, RandomBuyRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RandomBuyRequest read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of RandomBuyRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of RandomBuyRequest
  * @throws IOException if the JSON string is invalid with respect to RandomBuyRequest
  */
  public static RandomBuyRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RandomBuyRequest.class);
  }

 /**
  * Convert an instance of RandomBuyRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

