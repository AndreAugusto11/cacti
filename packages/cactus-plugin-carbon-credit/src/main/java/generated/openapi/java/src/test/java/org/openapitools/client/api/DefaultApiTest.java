/*
 * Hyperledger Cactus Plugin - Carbon Credit
 * Implementation for Carbon Credit Plugin logic
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.GetAvailableTCO2sRequest;
import org.openapitools.client.model.GetAvailableTCO2sResponse;
import org.openapitools.client.model.GetPurchasePriceRequest;
import org.openapitools.client.model.GetPurchasePriceResponse;
import org.openapitools.client.model.GetTCO2MetadataRequest;
import org.openapitools.client.model.RandomBuyRequest;
import org.openapitools.client.model.RandomBuyResponse;
import org.openapitools.client.model.RetireRequest;
import org.openapitools.client.model.RetireResponse;
import org.openapitools.client.model.SpecificBuyRequest;
import org.openapitools.client.model.SpecificBuyResponse;
import org.openapitools.client.model.TCO2Metadata;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DefaultApi
 */
@Disabled
public class DefaultApiTest {

    private final DefaultApi api = new DefaultApi();

    /**
     * Get a list of available TCO2s (Tokenized Carbon Offset Units).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAvailableTCO2sRequestTest() throws ApiException {
        GetAvailableTCO2sRequest getAvailableTCO2sRequest = null;
        GetAvailableTCO2sResponse response = api.getAvailableTCO2sRequest(getAvailableTCO2sRequest);
        // TODO: test validations
    }

    /**
     * Get the purchase price for a specific TCO2.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPurchasePriceRequestTest() throws ApiException {
        GetPurchasePriceRequest getPurchasePriceRequest = null;
        GetPurchasePriceResponse response = api.getPurchasePriceRequest(getPurchasePriceRequest);
        // TODO: test validations
    }

    /**
     * Get metadata for a specific TCO2.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTCO2MetadataRequestTest() throws ApiException {
        GetTCO2MetadataRequest getTCO2MetadataRequest = null;
        TCO2Metadata response = api.getTCO2MetadataRequest(getTCO2MetadataRequest);
        // TODO: test validations
    }

    /**
     * Acquire a random basket of TCO2s from a marketplace.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void randomBuyRequestTest() throws ApiException {
        RandomBuyRequest randomBuyRequest = null;
        RandomBuyResponse response = api.randomBuyRequest(randomBuyRequest);
        // TODO: test validations
    }

    /**
     * Retire a specific basket of TCO2s on a marketplace.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void retireRequestTest() throws ApiException {
        RetireRequest retireRequest = null;
        RetireResponse response = api.retireRequest(retireRequest);
        // TODO: test validations
    }

    /**
     * Acquire a specific basket of TCO2s from a marketplace.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void specificBuyRequestTest() throws ApiException {
        SpecificBuyRequest specificBuyRequest = null;
        SpecificBuyResponse response = api.specificBuyRequest(specificBuyRequest);
        // TODO: test validations
    }

}
