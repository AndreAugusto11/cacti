/* tslint:disable */
/* eslint-disable */
/**
 * Hyperledger Cactus Plugin - Carbon Credit
 * Implementation for Carbon Credit Plugin logic
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface GetAvailableTCO2sRequest
 */
export interface GetAvailableTCO2sRequest {
    /**
     * 
     * @type {Marketplace}
     * @memberof GetAvailableTCO2sRequest
     */
    'marketplace': Marketplace;
    /**
     * 
     * @type {Network}
     * @memberof GetAvailableTCO2sRequest
     */
    'network': Network;
    /**
     * A string to filter the results by (e.g., supply).
     * @type {string}
     * @memberof GetAvailableTCO2sRequest
     */
    'filterCriteria'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetAvailableTCO2sRequest
     */
    'orderBy'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetAvailableTCO2sRequest
     */
    'limit'?: string;
}


/**
 * 
 * @export
 * @interface GetAvailableTCO2sResponse
 */
export interface GetAvailableTCO2sResponse {
    /**
     * 
     * @type {Array<GetAvailableTCO2sResponseTco2ListInner>}
     * @memberof GetAvailableTCO2sResponse
     */
    'tco2List': Array<GetAvailableTCO2sResponseTco2ListInner>;
    /**
     * 
     * @type {number}
     * @memberof GetAvailableTCO2sResponse
     */
    'totalCount': number;
}
/**
 * 
 * @export
 * @interface GetAvailableTCO2sResponseTco2ListInner
 */
export interface GetAvailableTCO2sResponseTco2ListInner {
    /**
     * 
     * @type {string}
     * @memberof GetAvailableTCO2sResponseTco2ListInner
     */
    'address': string;
    /**
     * 
     * @type {GetAvailableTCO2sResponseTco2ListInnerProjectDetails}
     * @memberof GetAvailableTCO2sResponseTco2ListInner
     */
    'projectDetails': GetAvailableTCO2sResponseTco2ListInnerProjectDetails;
}
/**
 * 
 * @export
 * @interface GetAvailableTCO2sResponseTco2ListInnerProjectDetails
 */
export interface GetAvailableTCO2sResponseTco2ListInnerProjectDetails {
    /**
     * 
     * @type {string}
     * @memberof GetAvailableTCO2sResponseTco2ListInnerProjectDetails
     */
    'projectId': string;
    /**
     * 
     * @type {string}
     * @memberof GetAvailableTCO2sResponseTco2ListInnerProjectDetails
     */
    'projectName'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetAvailableTCO2sResponseTco2ListInnerProjectDetails
     */
    'projectDescription'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetAvailableTCO2sResponseTco2ListInnerProjectDetails
     */
    'projectType'?: string;
}
/**
 * 
 * @export
 * @interface GetPurchasePriceRequest
 */
export interface GetPurchasePriceRequest {
    /**
     * 
     * @type {Marketplace}
     * @memberof GetPurchasePriceRequest
     */
    'marketplace': Marketplace;
    /**
     * 
     * @type {Network}
     * @memberof GetPurchasePriceRequest
     */
    'network': Network;
    /**
     * The token address to retrieve the price for.
     * @type {string}
     * @memberof GetPurchasePriceRequest
     */
    'unit': string;
    /**
     * The amount of Units to retrieve the price for.
     * @type {string}
     * @memberof GetPurchasePriceRequest
     */
    'amount': string;
}


/**
 * 
 * @export
 * @interface GetPurchasePriceResponse
 */
export interface GetPurchasePriceResponse {
    /**
     * The current price in USDC for the requested amount.
     * @type {number}
     * @memberof GetPurchasePriceResponse
     */
    'price': number;
}
/**
 * 
 * @export
 * @interface GetTCO2MetadataRequest
 */
export interface GetTCO2MetadataRequest {
    /**
     * 
     * @type {Marketplace}
     * @memberof GetTCO2MetadataRequest
     */
    'marketplace': Marketplace;
    /**
     * 
     * @type {Network}
     * @memberof GetTCO2MetadataRequest
     */
    'network': Network;
    /**
     * 
     * @type {string}
     * @memberof GetTCO2MetadataRequest
     */
    'projectIdentifier': string;
    /**
     * 
     * @type {string}
     * @memberof GetTCO2MetadataRequest
     */
    'tco2Identifier': string;
}


/**
 * 
 * @export
 * @enum {string}
 */

export const Marketplace = {
    Toucan: 'Toucan'
} as const;

export type Marketplace = typeof Marketplace[keyof typeof Marketplace];


/**
 * 
 * @export
 * @enum {string}
 */

export const Network = {
    Polygon: 'polygon',
    Celo: 'celo',
    Alfajores: 'alfajores'
} as const;

export type Network = typeof Network[keyof typeof Network];


/**
 * 
 * @export
 * @interface NetworkConfig
 */
export interface NetworkConfig {
    /**
     * 
     * @type {string}
     * @memberof NetworkConfig
     */
    'rpcUrl': string;
    /**
     * 
     * @type {Network}
     * @memberof NetworkConfig
     */
    'network': Network;
}


/**
 * 
 * @export
 * @interface RandomBuyRequest
 */
export interface RandomBuyRequest {
    /**
     * 
     * @type {Marketplace}
     * @memberof RandomBuyRequest
     */
    'marketplace': Marketplace;
    /**
     * 
     * @type {Network}
     * @memberof RandomBuyRequest
     */
    'network': Network;
    /**
     * 
     * @type {string}
     * @memberof RandomBuyRequest
     */
    'paymentToken'?: string;
    /**
     * 
     * @type {string}
     * @memberof RandomBuyRequest
     */
    'amount': string;
    /**
     * 
     * @type {SpecificBuyRequestWalletObject}
     * @memberof RandomBuyRequest
     */
    'walletObject': SpecificBuyRequestWalletObject;
}


/**
 * 
 * @export
 * @interface RandomBuyResponse
 */
export interface RandomBuyResponse {
    /**
     * 
     * @type {string}
     * @memberof RandomBuyResponse
     */
    'txHashSwap': string;
    /**
     * 
     * @type {Array<SpecificBuyResponseAssetAmountsInner>}
     * @memberof RandomBuyResponse
     */
    'assetAmounts': Array<SpecificBuyResponseAssetAmountsInner>;
    /**
     * 
     * @type {Array<SpecificBuyResponseAssetAmountsInner>}
     * @memberof RandomBuyResponse
     */
    'tco2List'?: Array<SpecificBuyResponseAssetAmountsInner>;
}
/**
 * 
 * @export
 * @interface RetireRequest
 */
export interface RetireRequest {
    /**
     * 
     * @type {Marketplace}
     * @memberof RetireRequest
     */
    'marketplace': Marketplace;
    /**
     * 
     * @type {Network}
     * @memberof RetireRequest
     */
    'network': Network;
    /**
     * 
     * @type {string}
     * @memberof RetireRequest
     */
    'entityName': string;
    /**
     * 
     * @type {Array<string>}
     * @memberof RetireRequest
     */
    'tco2s': Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof RetireRequest
     */
    'amounts': Array<string>;
    /**
     * 
     * @type {string}
     * @memberof RetireRequest
     */
    'beneficiaryAddress': string;
    /**
     * 
     * @type {string}
     * @memberof RetireRequest
     */
    'beneficiaryName': string;
    /**
     * 
     * @type {string}
     * @memberof RetireRequest
     */
    'message'?: string;
    /**
     * 
     * @type {string}
     * @memberof RetireRequest
     */
    'retirementReason': string;
    /**
     * 
     * @type {SpecificBuyRequestWalletObject}
     * @memberof RetireRequest
     */
    'walletObject': SpecificBuyRequestWalletObject;
}


/**
 * 
 * @export
 * @interface RetireResponse
 */
export interface RetireResponse {
    /**
     * 
     * @type {Array<string>}
     * @memberof RetireResponse
     */
    'txHashesRetire': Array<string>;
    /**
     * 
     * @type {Array<number>}
     * @memberof RetireResponse
     */
    'retirementCertificateIds': Array<number>;
}
/**
 * 
 * @export
 * @interface SpecificBuyRequest
 */
export interface SpecificBuyRequest {
    /**
     * 
     * @type {Marketplace}
     * @memberof SpecificBuyRequest
     */
    'marketplace': Marketplace;
    /**
     * 
     * @type {Network}
     * @memberof SpecificBuyRequest
     */
    'network': Network;
    /**
     * 
     * @type {string}
     * @memberof SpecificBuyRequest
     */
    'paymentToken': string;
    /**
     * A mapping from address (string) to amount (string).
     * @type {{ [key: string]: string; }}
     * @memberof SpecificBuyRequest
     */
    'items': { [key: string]: string; };
    /**
     * 
     * @type {SpecificBuyRequestWalletObject}
     * @memberof SpecificBuyRequest
     */
    'walletObject': SpecificBuyRequestWalletObject;
}


/**
 * An object containing the private key and provider URL for the wallet.
 * @export
 * @interface SpecificBuyRequestWalletObject
 */
export interface SpecificBuyRequestWalletObject {
    /**
     * 
     * @type {string}
     * @memberof SpecificBuyRequestWalletObject
     */
    'address'?: string;
    /**
     * 
     * @type {string}
     * @memberof SpecificBuyRequestWalletObject
     */
    'privateKey': string;
    /**
     * 
     * @type {string}
     * @memberof SpecificBuyRequestWalletObject
     */
    'providerURL': string;
}
/**
 * 
 * @export
 * @interface SpecificBuyResponse
 */
export interface SpecificBuyResponse {
    /**
     * 
     * @type {string}
     * @memberof SpecificBuyResponse
     */
    'txHashSwap': string;
    /**
     * 
     * @type {string}
     * @memberof SpecificBuyResponse
     */
    'buyTxHash': string;
    /**
     * 
     * @type {Array<SpecificBuyResponseAssetAmountsInner>}
     * @memberof SpecificBuyResponse
     */
    'assetAmounts': Array<SpecificBuyResponseAssetAmountsInner>;
}
/**
 * 
 * @export
 * @interface SpecificBuyResponseAssetAmountsInner
 */
export interface SpecificBuyResponseAssetAmountsInner {
    /**
     * 
     * @type {string}
     * @memberof SpecificBuyResponseAssetAmountsInner
     */
    'address': string;
    /**
     * 
     * @type {string}
     * @memberof SpecificBuyResponseAssetAmountsInner
     */
    'amount': string;
}
/**
 * 
 * @export
 * @interface TCO2Metadata
 */
export interface TCO2Metadata {
    /**
     * 
     * @type {string}
     * @memberof TCO2Metadata
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof TCO2Metadata
     */
    'symbol': string;
    /**
     * 
     * @type {number}
     * @memberof TCO2Metadata
     */
    'totalSupply': number;
    /**
     * 
     * @type {TCO2MetadataAttributes}
     * @memberof TCO2Metadata
     */
    'attributes': TCO2MetadataAttributes;
}
/**
 * 
 * @export
 * @interface TCO2MetadataAttributes
 */
export interface TCO2MetadataAttributes {
    /**
     * 
     * @type {string}
     * @memberof TCO2MetadataAttributes
     */
    'region'?: string;
    /**
     * 
     * @type {string}
     * @memberof TCO2MetadataAttributes
     */
    'totalVintageQuantity'?: string;
    /**
     * 
     * @type {string}
     * @memberof TCO2MetadataAttributes
     */
    'methodology'?: string;
}

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get a list of available TCO2s (Tokenized Carbon Offset Units).
         * @param {GetAvailableTCO2sRequest} [getAvailableTCO2sRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAvailableTCO2sRequest: async (getAvailableTCO2sRequest?: GetAvailableTCO2sRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/@hyperledger/cactus-plugin-carbon-credit/get-available-tco2s`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(getAvailableTCO2sRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get the purchase price for a specific TCO2.
         * @param {GetPurchasePriceRequest} [getPurchasePriceRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPurchasePriceRequest: async (getPurchasePriceRequest?: GetPurchasePriceRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/@hyperledger/cactus-plugin-carbon-credit/get-purchase-price`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(getPurchasePriceRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get metadata for a specific TCO2.
         * @param {GetTCO2MetadataRequest} [getTCO2MetadataRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTCO2MetadataRequest: async (getTCO2MetadataRequest?: GetTCO2MetadataRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/@hyperledger/cactus-plugin-carbon-credit/get-tco2-metadata`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(getTCO2MetadataRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Acquire a random basket of TCO2s from a marketplace.
         * @param {RandomBuyRequest} [randomBuyRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        randomBuyRequest: async (randomBuyRequest?: RandomBuyRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/@hyperledger/cactus-plugin-carbon-credit/random-buy`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(randomBuyRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retire a specific basket of TCO2s on a marketplace.
         * @param {RetireRequest} [retireRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retireRequest: async (retireRequest?: RetireRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/@hyperledger/cactus-plugin-carbon-credit/retire`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(retireRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Acquire a specific basket of TCO2s from a marketplace.
         * @param {SpecificBuyRequest} [specificBuyRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        specificBuyRequest: async (specificBuyRequest?: SpecificBuyRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/@hyperledger/cactus-plugin-carbon-credit/specific-buy`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(specificBuyRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         * Get a list of available TCO2s (Tokenized Carbon Offset Units).
         * @param {GetAvailableTCO2sRequest} [getAvailableTCO2sRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAvailableTCO2sRequest(getAvailableTCO2sRequest?: GetAvailableTCO2sRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetAvailableTCO2sResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAvailableTCO2sRequest(getAvailableTCO2sRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get the purchase price for a specific TCO2.
         * @param {GetPurchasePriceRequest} [getPurchasePriceRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPurchasePriceRequest(getPurchasePriceRequest?: GetPurchasePriceRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetPurchasePriceResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPurchasePriceRequest(getPurchasePriceRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get metadata for a specific TCO2.
         * @param {GetTCO2MetadataRequest} [getTCO2MetadataRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTCO2MetadataRequest(getTCO2MetadataRequest?: GetTCO2MetadataRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TCO2Metadata>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTCO2MetadataRequest(getTCO2MetadataRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Acquire a random basket of TCO2s from a marketplace.
         * @param {RandomBuyRequest} [randomBuyRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async randomBuyRequest(randomBuyRequest?: RandomBuyRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RandomBuyResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.randomBuyRequest(randomBuyRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retire a specific basket of TCO2s on a marketplace.
         * @param {RetireRequest} [retireRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async retireRequest(retireRequest?: RetireRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RetireResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.retireRequest(retireRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Acquire a specific basket of TCO2s from a marketplace.
         * @param {SpecificBuyRequest} [specificBuyRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async specificBuyRequest(specificBuyRequest?: SpecificBuyRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SpecificBuyResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.specificBuyRequest(specificBuyRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         * Get a list of available TCO2s (Tokenized Carbon Offset Units).
         * @param {GetAvailableTCO2sRequest} [getAvailableTCO2sRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAvailableTCO2sRequest(getAvailableTCO2sRequest?: GetAvailableTCO2sRequest, options?: any): AxiosPromise<GetAvailableTCO2sResponse> {
            return localVarFp.getAvailableTCO2sRequest(getAvailableTCO2sRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Get the purchase price for a specific TCO2.
         * @param {GetPurchasePriceRequest} [getPurchasePriceRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPurchasePriceRequest(getPurchasePriceRequest?: GetPurchasePriceRequest, options?: any): AxiosPromise<GetPurchasePriceResponse> {
            return localVarFp.getPurchasePriceRequest(getPurchasePriceRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Get metadata for a specific TCO2.
         * @param {GetTCO2MetadataRequest} [getTCO2MetadataRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTCO2MetadataRequest(getTCO2MetadataRequest?: GetTCO2MetadataRequest, options?: any): AxiosPromise<TCO2Metadata> {
            return localVarFp.getTCO2MetadataRequest(getTCO2MetadataRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Acquire a random basket of TCO2s from a marketplace.
         * @param {RandomBuyRequest} [randomBuyRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        randomBuyRequest(randomBuyRequest?: RandomBuyRequest, options?: any): AxiosPromise<RandomBuyResponse> {
            return localVarFp.randomBuyRequest(randomBuyRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Retire a specific basket of TCO2s on a marketplace.
         * @param {RetireRequest} [retireRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retireRequest(retireRequest?: RetireRequest, options?: any): AxiosPromise<RetireResponse> {
            return localVarFp.retireRequest(retireRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Acquire a specific basket of TCO2s from a marketplace.
         * @param {SpecificBuyRequest} [specificBuyRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        specificBuyRequest(specificBuyRequest?: SpecificBuyRequest, options?: any): AxiosPromise<SpecificBuyResponse> {
            return localVarFp.specificBuyRequest(specificBuyRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * Get a list of available TCO2s (Tokenized Carbon Offset Units).
     * @param {GetAvailableTCO2sRequest} [getAvailableTCO2sRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getAvailableTCO2sRequest(getAvailableTCO2sRequest?: GetAvailableTCO2sRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getAvailableTCO2sRequest(getAvailableTCO2sRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get the purchase price for a specific TCO2.
     * @param {GetPurchasePriceRequest} [getPurchasePriceRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getPurchasePriceRequest(getPurchasePriceRequest?: GetPurchasePriceRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getPurchasePriceRequest(getPurchasePriceRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get metadata for a specific TCO2.
     * @param {GetTCO2MetadataRequest} [getTCO2MetadataRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getTCO2MetadataRequest(getTCO2MetadataRequest?: GetTCO2MetadataRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getTCO2MetadataRequest(getTCO2MetadataRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Acquire a random basket of TCO2s from a marketplace.
     * @param {RandomBuyRequest} [randomBuyRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public randomBuyRequest(randomBuyRequest?: RandomBuyRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).randomBuyRequest(randomBuyRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retire a specific basket of TCO2s on a marketplace.
     * @param {RetireRequest} [retireRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public retireRequest(retireRequest?: RetireRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).retireRequest(retireRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Acquire a specific basket of TCO2s from a marketplace.
     * @param {SpecificBuyRequest} [specificBuyRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public specificBuyRequest(specificBuyRequest?: SpecificBuyRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).specificBuyRequest(specificBuyRequest, options).then((request) => request(this.axios, this.basePath));
    }
}


