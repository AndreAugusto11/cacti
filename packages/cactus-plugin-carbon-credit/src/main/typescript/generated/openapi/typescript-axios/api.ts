/* tslint:disable */
/* eslint-disable */
/**
 * Hyperledger Cactus Plugin - Carbon Credit
 * Implementation for Carbon Credit Plugin logic
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface GetAvailableTCO2sRequest
 */
export interface GetAvailableTCO2sRequest {
    /**
     * 
     * @type {Marketplace}
     * @memberof GetAvailableTCO2sRequest
     */
    'marketplace': Marketplace;
    /**
     * 
     * @type {Network}
     * @memberof GetAvailableTCO2sRequest
     */
    'network': Network;
    /**
     * 
     * @type {string}
     * @memberof GetAvailableTCO2sRequest
     */
    'filterCriteria'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetAvailableTCO2sRequest
     */
    'orderBy'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetAvailableTCO2sRequest
     */
    'limit'?: string;
}


/**
 * 
 * @export
 * @interface GetAvailableTCO2sResponse
 */
export interface GetAvailableTCO2sResponse {
    /**
     * 
     * @type {Array<string>}
     * @memberof GetAvailableTCO2sResponse
     */
    'tco2List': Array<string>;
    /**
     * 
     * @type {number}
     * @memberof GetAvailableTCO2sResponse
     */
    'totalCount': number;
}
/**
 * 
 * @export
 * @interface GetPurchasePriceRequest
 */
export interface GetPurchasePriceRequest {
    /**
     * 
     * @type {Marketplace}
     * @memberof GetPurchasePriceRequest
     */
    'platform': Marketplace;
    /**
     * 
     * @type {Network}
     * @memberof GetPurchasePriceRequest
     */
    'network': Network;
    /**
     * The token address to retrieve the price for.
     * @type {string}
     * @memberof GetPurchasePriceRequest
     */
    'unit': string;
    /**
     * The amount of Units to price.
     * @type {number}
     * @memberof GetPurchasePriceRequest
     */
    'amount': number;
}


/**
 * 
 * @export
 * @interface GetPurchasePriceResponse
 */
export interface GetPurchasePriceResponse {
    /**
     * The current price in USDC for the requested amount.
     * @type {string}
     * @memberof GetPurchasePriceResponse
     */
    'price': string;
}
/**
 * 
 * @export
 * @interface GetVCUMetadataRequest
 */
export interface GetVCUMetadataRequest {
    /**
     * 
     * @type {Marketplace}
     * @memberof GetVCUMetadataRequest
     */
    'marketplace': Marketplace;
    /**
     * 
     * @type {Network}
     * @memberof GetVCUMetadataRequest
     */
    'network': Network;
    /**
     * 
     * @type {string}
     * @memberof GetVCUMetadataRequest
     */
    'projectIdentifier': string;
    /**
     * 
     * @type {string}
     * @memberof GetVCUMetadataRequest
     */
    'vcuIdentifier': string;
}


/**
 * 
 * @export
 * @enum {string}
 */

export const Marketplace = {
    Toucan: 'Toucan'
} as const;

export type Marketplace = typeof Marketplace[keyof typeof Marketplace];


/**
 * 
 * @export
 * @enum {string}
 */

export const Network = {
    Polygon: 'polygon',
    Ethereum: 'ethereum',
    Celo: 'celo',
    Alfajores: 'alfajores',
    Base: 'base',
    BaseSepolia: 'base-sepolia'
} as const;

export type Network = typeof Network[keyof typeof Network];


/**
 * 
 * @export
 * @interface RandomBuyRequest
 */
export interface RandomBuyRequest {
    /**
     * 
     * @type {Marketplace}
     * @memberof RandomBuyRequest
     */
    'marketplace': Marketplace;
    /**
     * 
     * @type {Network}
     * @memberof RandomBuyRequest
     */
    'network': Network;
    /**
     * 
     * @type {string}
     * @memberof RandomBuyRequest
     */
    'paymentToken'?: string;
    /**
     * 
     * @type {number}
     * @memberof RandomBuyRequest
     */
    'amount': number;
    /**
     * 
     * @type {string}
     * @memberof RandomBuyRequest
     */
    'walletObject': string;
}


/**
 * 
 * @export
 * @interface RandomBuyResponse
 */
export interface RandomBuyResponse {
    /**
     * 
     * @type {string}
     * @memberof RandomBuyResponse
     */
    'txHashSwap': string;
    /**
     * 
     * @type {string}
     * @memberof RandomBuyResponse
     */
    'assetAmount': string;
    /**
     * 
     * @type {Array<SpecificBuyResponseTco2ListInner>}
     * @memberof RandomBuyResponse
     */
    'tco2List'?: Array<SpecificBuyResponseTco2ListInner>;
}
/**
 * 
 * @export
 * @interface RetireRequest
 */
export interface RetireRequest {
    /**
     * 
     * @type {Marketplace}
     * @memberof RetireRequest
     */
    'marketplace': Marketplace;
    /**
     * 
     * @type {Network}
     * @memberof RetireRequest
     */
    'network': Network;
    /**
     * 
     * @type {string}
     * @memberof RetireRequest
     */
    'walletObject': string;
    /**
     * 
     * @type {Array<string>}
     * @memberof RetireRequest
     */
    'tco2s': Array<string>;
    /**
     * 
     * @type {Array<number>}
     * @memberof RetireRequest
     */
    'amounts': Array<number>;
    /**
     * 
     * @type {string}
     * @memberof RetireRequest
     */
    'beneficiaryAddress': string;
    /**
     * 
     * @type {string}
     * @memberof RetireRequest
     */
    'beneficiaryName': string;
    /**
     * 
     * @type {string}
     * @memberof RetireRequest
     */
    'message': string;
    /**
     * 
     * @type {string}
     * @memberof RetireRequest
     */
    'retirementReason': string;
}


/**
 * 
 * @export
 * @interface RetireResponse
 */
export interface RetireResponse {
    /**
     * 
     * @type {string}
     * @memberof RetireResponse
     */
    'txHashRetire': string;
    /**
     * 
     * @type {string}
     * @memberof RetireResponse
     */
    'retirementCertificate': string;
}
/**
 * 
 * @export
 * @interface SpecificBuyRequest
 */
export interface SpecificBuyRequest {
    /**
     * 
     * @type {Marketplace}
     * @memberof SpecificBuyRequest
     */
    'marketplace': Marketplace;
    /**
     * 
     * @type {Network}
     * @memberof SpecificBuyRequest
     */
    'network': Network;
    /**
     * 
     * @type {string}
     * @memberof SpecificBuyRequest
     */
    'paymentToken': string;
    /**
     * 
     * @type {Array<SpecificBuyRequestItemsInner>}
     * @memberof SpecificBuyRequest
     */
    'items': Array<SpecificBuyRequestItemsInner>;
    /**
     * 
     * @type {string}
     * @memberof SpecificBuyRequest
     */
    'walletObject': string;
}


/**
 * 
 * @export
 * @interface SpecificBuyRequestItemsInner
 */
export interface SpecificBuyRequestItemsInner {
    /**
     * 
     * @type {string}
     * @memberof SpecificBuyRequestItemsInner
     */
    'address': string;
    /**
     * 
     * @type {number}
     * @memberof SpecificBuyRequestItemsInner
     */
    'amount': number;
}
/**
 * 
 * @export
 * @interface SpecificBuyResponse
 */
export interface SpecificBuyResponse {
    /**
     * 
     * @type {string}
     * @memberof SpecificBuyResponse
     */
    'txHashSwap': string;
    /**
     * 
     * @type {string}
     * @memberof SpecificBuyResponse
     */
    'assetAmount': string;
    /**
     * 
     * @type {Array<SpecificBuyResponseTco2ListInner>}
     * @memberof SpecificBuyResponse
     */
    'tco2List'?: Array<SpecificBuyResponseTco2ListInner>;
}
/**
 * 
 * @export
 * @interface SpecificBuyResponseTco2ListInner
 */
export interface SpecificBuyResponseTco2ListInner {
    /**
     * 
     * @type {string}
     * @memberof SpecificBuyResponseTco2ListInner
     */
    'address': string;
    /**
     * 
     * @type {string}
     * @memberof SpecificBuyResponseTco2ListInner
     */
    'amount': string;
}
/**
 * 
 * @export
 * @interface VCUMetadata
 */
export interface VCUMetadata {
    /**
     * 
     * @type {string}
     * @memberof VCUMetadata
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof VCUMetadata
     */
    'symbol': string;
    /**
     * 
     * @type {number}
     * @memberof VCUMetadata
     */
    'totalSupply': number;
    /**
     * 
     * @type {VCUMetadataAttributes}
     * @memberof VCUMetadata
     */
    'attributes': VCUMetadataAttributes;
}
/**
 * 
 * @export
 * @interface VCUMetadataAttributes
 */
export interface VCUMetadataAttributes {
    /**
     * 
     * @type {string}
     * @memberof VCUMetadataAttributes
     */
    'region'?: string;
    /**
     * 
     * @type {string}
     * @memberof VCUMetadataAttributes
     */
    'vintage'?: string;
    /**
     * 
     * @type {string}
     * @memberof VCUMetadataAttributes
     */
    'methodology'?: string;
    /**
     * 
     * @type {string}
     * @memberof VCUMetadataAttributes
     */
    'other'?: string;
}

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get a list of available VCUs (Verified Carbon Units).
         * @param {GetAvailableTCO2sRequest} [getAvailableTCO2sRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAvailableVCUsRequest: async (getAvailableTCO2sRequest?: GetAvailableTCO2sRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/@hyperledger/cactus-plugin-carbon-credit/get-available-vcus`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(getAvailableTCO2sRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get metadata for a specific VCU.
         * @param {GetVCUMetadataRequest} [getVCUMetadataRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVCUMetadataRequest: async (getVCUMetadataRequest?: GetVCUMetadataRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/@hyperledger/cactus-plugin-carbon-credit/get-vcu-metadata`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(getVCUMetadataRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Acquire a random basket of TCO2s from a marketplace.
         * @param {RandomBuyRequest} [randomBuyRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        randomBuyRequest: async (randomBuyRequest?: RandomBuyRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/@hyperledger/cactus-plugin-carbon-credit/random-buy`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(randomBuyRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Abstract burn operation that finalizes an offset on the underlying registry for a specific beneficiary and message.
         * @param {RetireRequest} [retireRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retireRequest: async (retireRequest?: RetireRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/@hyperledger/cactus-plugin-carbon-credit/retire`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(retireRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Acquire a specific basket of TCO2s from a marketplace.
         * @param {SpecificBuyRequest} [specificBuyRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        specificBuyRequest: async (specificBuyRequest?: SpecificBuyRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/@hyperledger/cactus-plugin-carbon-credit/specific-buy`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(specificBuyRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         * Get a list of available VCUs (Verified Carbon Units).
         * @param {GetAvailableTCO2sRequest} [getAvailableTCO2sRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAvailableVCUsRequest(getAvailableTCO2sRequest?: GetAvailableTCO2sRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetAvailableTCO2sResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAvailableVCUsRequest(getAvailableTCO2sRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get metadata for a specific VCU.
         * @param {GetVCUMetadataRequest} [getVCUMetadataRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getVCUMetadataRequest(getVCUMetadataRequest?: GetVCUMetadataRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VCUMetadata>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getVCUMetadataRequest(getVCUMetadataRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Acquire a random basket of TCO2s from a marketplace.
         * @param {RandomBuyRequest} [randomBuyRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async randomBuyRequest(randomBuyRequest?: RandomBuyRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RandomBuyResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.randomBuyRequest(randomBuyRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Abstract burn operation that finalizes an offset on the underlying registry for a specific beneficiary and message.
         * @param {RetireRequest} [retireRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async retireRequest(retireRequest?: RetireRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RetireResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.retireRequest(retireRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Acquire a specific basket of TCO2s from a marketplace.
         * @param {SpecificBuyRequest} [specificBuyRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async specificBuyRequest(specificBuyRequest?: SpecificBuyRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SpecificBuyResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.specificBuyRequest(specificBuyRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         * Get a list of available VCUs (Verified Carbon Units).
         * @param {GetAvailableTCO2sRequest} [getAvailableTCO2sRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAvailableVCUsRequest(getAvailableTCO2sRequest?: GetAvailableTCO2sRequest, options?: any): AxiosPromise<GetAvailableTCO2sResponse> {
            return localVarFp.getAvailableVCUsRequest(getAvailableTCO2sRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Get metadata for a specific VCU.
         * @param {GetVCUMetadataRequest} [getVCUMetadataRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVCUMetadataRequest(getVCUMetadataRequest?: GetVCUMetadataRequest, options?: any): AxiosPromise<VCUMetadata> {
            return localVarFp.getVCUMetadataRequest(getVCUMetadataRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Acquire a random basket of TCO2s from a marketplace.
         * @param {RandomBuyRequest} [randomBuyRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        randomBuyRequest(randomBuyRequest?: RandomBuyRequest, options?: any): AxiosPromise<RandomBuyResponse> {
            return localVarFp.randomBuyRequest(randomBuyRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Abstract burn operation that finalizes an offset on the underlying registry for a specific beneficiary and message.
         * @param {RetireRequest} [retireRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retireRequest(retireRequest?: RetireRequest, options?: any): AxiosPromise<RetireResponse> {
            return localVarFp.retireRequest(retireRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Acquire a specific basket of TCO2s from a marketplace.
         * @param {SpecificBuyRequest} [specificBuyRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        specificBuyRequest(specificBuyRequest?: SpecificBuyRequest, options?: any): AxiosPromise<SpecificBuyResponse> {
            return localVarFp.specificBuyRequest(specificBuyRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * Get a list of available VCUs (Verified Carbon Units).
     * @param {GetAvailableTCO2sRequest} [getAvailableTCO2sRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getAvailableVCUsRequest(getAvailableTCO2sRequest?: GetAvailableTCO2sRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getAvailableVCUsRequest(getAvailableTCO2sRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get metadata for a specific VCU.
     * @param {GetVCUMetadataRequest} [getVCUMetadataRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getVCUMetadataRequest(getVCUMetadataRequest?: GetVCUMetadataRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getVCUMetadataRequest(getVCUMetadataRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Acquire a random basket of TCO2s from a marketplace.
     * @param {RandomBuyRequest} [randomBuyRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public randomBuyRequest(randomBuyRequest?: RandomBuyRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).randomBuyRequest(randomBuyRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Abstract burn operation that finalizes an offset on the underlying registry for a specific beneficiary and message.
     * @param {RetireRequest} [retireRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public retireRequest(retireRequest?: RetireRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).retireRequest(retireRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Acquire a specific basket of TCO2s from a marketplace.
     * @param {SpecificBuyRequest} [specificBuyRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public specificBuyRequest(specificBuyRequest?: SpecificBuyRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).specificBuyRequest(specificBuyRequest, options).then((request) => request(this.axios, this.basePath));
    }
}


