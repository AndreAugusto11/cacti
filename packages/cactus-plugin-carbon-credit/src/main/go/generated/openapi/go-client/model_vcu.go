/*
Hyperledger Cactus Plugin - Carbon Credit

Implementation for Carbon Credit Plugin logic

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cactus-plugin-carbon-credit

import (
	"encoding/json"
)

// checks if the VCU type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &VCU{}

// VCU struct for VCU
type VCU struct {
	Id string `json:"id"`
	Name string `json:"name"`
	Amount float32 `json:"amount"`
	TokenAddress string `json:"tokenAddress"`
}

// NewVCU instantiates a new VCU object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVCU(id string, name string, amount float32, tokenAddress string) *VCU {
	this := VCU{}
	this.Id = id
	this.Name = name
	this.Amount = amount
	this.TokenAddress = tokenAddress
	return &this
}

// NewVCUWithDefaults instantiates a new VCU object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVCUWithDefaults() *VCU {
	this := VCU{}
	return &this
}

// GetId returns the Id field value
func (o *VCU) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *VCU) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *VCU) SetId(v string) {
	o.Id = v
}

// GetName returns the Name field value
func (o *VCU) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *VCU) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *VCU) SetName(v string) {
	o.Name = v
}

// GetAmount returns the Amount field value
func (o *VCU) GetAmount() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Amount
}

// GetAmountOk returns a tuple with the Amount field value
// and a boolean to check if the value has been set.
func (o *VCU) GetAmountOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Amount, true
}

// SetAmount sets field value
func (o *VCU) SetAmount(v float32) {
	o.Amount = v
}

// GetTokenAddress returns the TokenAddress field value
func (o *VCU) GetTokenAddress() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TokenAddress
}

// GetTokenAddressOk returns a tuple with the TokenAddress field value
// and a boolean to check if the value has been set.
func (o *VCU) GetTokenAddressOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TokenAddress, true
}

// SetTokenAddress sets field value
func (o *VCU) SetTokenAddress(v string) {
	o.TokenAddress = v
}

func (o VCU) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o VCU) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["name"] = o.Name
	toSerialize["amount"] = o.Amount
	toSerialize["tokenAddress"] = o.TokenAddress
	return toSerialize, nil
}

type NullableVCU struct {
	value *VCU
	isSet bool
}

func (v NullableVCU) Get() *VCU {
	return v.value
}

func (v *NullableVCU) Set(val *VCU) {
	v.value = val
	v.isSet = true
}

func (v NullableVCU) IsSet() bool {
	return v.isSet
}

func (v *NullableVCU) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVCU(val *VCU) *NullableVCU {
	return &NullableVCU{value: val, isSet: true}
}

func (v NullableVCU) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVCU) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


