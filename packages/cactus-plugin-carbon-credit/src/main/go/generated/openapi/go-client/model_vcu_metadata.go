/*
Hyperledger Cactus Plugin - Carbon Credit

Implementation for Carbon Credit Plugin logic

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the VCUMetadata type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &VCUMetadata{}

// VCUMetadata struct for VCUMetadata
type VCUMetadata struct {
	Name string `json:"name"`
	Symbol string `json:"symbol"`
	TotalSupply float32 `json:"totalSupply"`
	Attributes VCUMetadataAttributes `json:"attributes"`
}

// NewVCUMetadata instantiates a new VCUMetadata object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVCUMetadata(name string, symbol string, totalSupply float32, attributes VCUMetadataAttributes) *VCUMetadata {
	this := VCUMetadata{}
	this.Name = name
	this.Symbol = symbol
	this.TotalSupply = totalSupply
	this.Attributes = attributes
	return &this
}

// NewVCUMetadataWithDefaults instantiates a new VCUMetadata object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVCUMetadataWithDefaults() *VCUMetadata {
	this := VCUMetadata{}
	return &this
}

// GetName returns the Name field value
func (o *VCUMetadata) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *VCUMetadata) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *VCUMetadata) SetName(v string) {
	o.Name = v
}

// GetSymbol returns the Symbol field value
func (o *VCUMetadata) GetSymbol() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Symbol
}

// GetSymbolOk returns a tuple with the Symbol field value
// and a boolean to check if the value has been set.
func (o *VCUMetadata) GetSymbolOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Symbol, true
}

// SetSymbol sets field value
func (o *VCUMetadata) SetSymbol(v string) {
	o.Symbol = v
}

// GetTotalSupply returns the TotalSupply field value
func (o *VCUMetadata) GetTotalSupply() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.TotalSupply
}

// GetTotalSupplyOk returns a tuple with the TotalSupply field value
// and a boolean to check if the value has been set.
func (o *VCUMetadata) GetTotalSupplyOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TotalSupply, true
}

// SetTotalSupply sets field value
func (o *VCUMetadata) SetTotalSupply(v float32) {
	o.TotalSupply = v
}

// GetAttributes returns the Attributes field value
func (o *VCUMetadata) GetAttributes() VCUMetadataAttributes {
	if o == nil {
		var ret VCUMetadataAttributes
		return ret
	}

	return o.Attributes
}

// GetAttributesOk returns a tuple with the Attributes field value
// and a boolean to check if the value has been set.
func (o *VCUMetadata) GetAttributesOk() (*VCUMetadataAttributes, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Attributes, true
}

// SetAttributes sets field value
func (o *VCUMetadata) SetAttributes(v VCUMetadataAttributes) {
	o.Attributes = v
}

func (o VCUMetadata) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o VCUMetadata) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	toSerialize["symbol"] = o.Symbol
	toSerialize["totalSupply"] = o.TotalSupply
	toSerialize["attributes"] = o.Attributes
	return toSerialize, nil
}

type NullableVCUMetadata struct {
	value *VCUMetadata
	isSet bool
}

func (v NullableVCUMetadata) Get() *VCUMetadata {
	return v.value
}

func (v *NullableVCUMetadata) Set(val *VCUMetadata) {
	v.value = val
	v.isSet = true
}

func (v NullableVCUMetadata) IsSet() bool {
	return v.isSet
}

func (v *NullableVCUMetadata) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVCUMetadata(val *VCUMetadata) *NullableVCUMetadata {
	return &NullableVCUMetadata{value: val, isSet: true}
}

func (v NullableVCUMetadata) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVCUMetadata) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


