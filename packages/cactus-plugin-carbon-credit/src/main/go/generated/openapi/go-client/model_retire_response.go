/*
Hyperledger Cactus Plugin - Carbon Credit

Implementation for Carbon Credit Plugin logic

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cactus-plugin-carbon-credit

import (
	"encoding/json"
)

// checks if the RetireResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RetireResponse{}

// RetireResponse struct for RetireResponse
type RetireResponse struct {
	TxHashRetire string `json:"txHashRetire"`
	RetirementCertificate *string `json:"retirementCertificate,omitempty"`
}

// NewRetireResponse instantiates a new RetireResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRetireResponse(txHashRetire string) *RetireResponse {
	this := RetireResponse{}
	this.TxHashRetire = txHashRetire
	return &this
}

// NewRetireResponseWithDefaults instantiates a new RetireResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRetireResponseWithDefaults() *RetireResponse {
	this := RetireResponse{}
	return &this
}

// GetTxHashRetire returns the TxHashRetire field value
func (o *RetireResponse) GetTxHashRetire() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TxHashRetire
}

// GetTxHashRetireOk returns a tuple with the TxHashRetire field value
// and a boolean to check if the value has been set.
func (o *RetireResponse) GetTxHashRetireOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TxHashRetire, true
}

// SetTxHashRetire sets field value
func (o *RetireResponse) SetTxHashRetire(v string) {
	o.TxHashRetire = v
}

// GetRetirementCertificate returns the RetirementCertificate field value if set, zero value otherwise.
func (o *RetireResponse) GetRetirementCertificate() string {
	if o == nil || IsNil(o.RetirementCertificate) {
		var ret string
		return ret
	}
	return *o.RetirementCertificate
}

// GetRetirementCertificateOk returns a tuple with the RetirementCertificate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RetireResponse) GetRetirementCertificateOk() (*string, bool) {
	if o == nil || IsNil(o.RetirementCertificate) {
		return nil, false
	}
	return o.RetirementCertificate, true
}

// HasRetirementCertificate returns a boolean if a field has been set.
func (o *RetireResponse) HasRetirementCertificate() bool {
	if o != nil && !IsNil(o.RetirementCertificate) {
		return true
	}

	return false
}

// SetRetirementCertificate gets a reference to the given string and assigns it to the RetirementCertificate field.
func (o *RetireResponse) SetRetirementCertificate(v string) {
	o.RetirementCertificate = &v
}

func (o RetireResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RetireResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["txHashRetire"] = o.TxHashRetire
	if !IsNil(o.RetirementCertificate) {
		toSerialize["retirementCertificate"] = o.RetirementCertificate
	}
	return toSerialize, nil
}

type NullableRetireResponse struct {
	value *RetireResponse
	isSet bool
}

func (v NullableRetireResponse) Get() *RetireResponse {
	return v.value
}

func (v *NullableRetireResponse) Set(val *RetireResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableRetireResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableRetireResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRetireResponse(val *RetireResponse) *NullableRetireResponse {
	return &NullableRetireResponse{value: val, isSet: true}
}

func (v NullableRetireResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRetireResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


