/*
Hyperledger Cactus Plugin - Carbon Credit

Implementation for Carbon Credit Plugin logic

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cactus-plugin-carbon-credit

import (
	"encoding/json"
	"fmt"
)

// Marketplace the model 'Marketplace'
type Marketplace string

// List of Marketplace
const (
	TOUCAN Marketplace = "Toucan"
)

// All allowed values of Marketplace enum
var AllowedMarketplaceEnumValues = []Marketplace{
	"Toucan",
}

func (v *Marketplace) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := Marketplace(value)
	for _, existing := range AllowedMarketplaceEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid Marketplace", value)
}

// NewMarketplaceFromValue returns a pointer to a valid Marketplace
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewMarketplaceFromValue(v string) (*Marketplace, error) {
	ev := Marketplace(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for Marketplace: valid values are %v", v, AllowedMarketplaceEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v Marketplace) IsValid() bool {
	for _, existing := range AllowedMarketplaceEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Marketplace value
func (v Marketplace) Ptr() *Marketplace {
	return &v
}

type NullableMarketplace struct {
	value *Marketplace
	isSet bool
}

func (v NullableMarketplace) Get() *Marketplace {
	return v.value
}

func (v *NullableMarketplace) Set(val *Marketplace) {
	v.value = val
	v.isSet = true
}

func (v NullableMarketplace) IsSet() bool {
	return v.isSet
}

func (v *NullableMarketplace) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMarketplace(val *Marketplace) *NullableMarketplace {
	return &NullableMarketplace{value: val, isSet: true}
}

func (v NullableMarketplace) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMarketplace) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

