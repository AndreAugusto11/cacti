/*
Hyperledger Cactus Plugin - Carbon Credit

Implementation for Carbon Credit Plugin logic

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cactus-plugin-carbon-credit

import (
	"encoding/json"
)

// checks if the VCUMetadataAttributes type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &VCUMetadataAttributes{}

// VCUMetadataAttributes struct for VCUMetadataAttributes
type VCUMetadataAttributes struct {
	Region *string `json:"region,omitempty"`
	TotalVintageQuantity *string `json:"totalVintageQuantity,omitempty"`
	Methodology *string `json:"methodology,omitempty"`
}

// NewVCUMetadataAttributes instantiates a new VCUMetadataAttributes object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVCUMetadataAttributes() *VCUMetadataAttributes {
	this := VCUMetadataAttributes{}
	return &this
}

// NewVCUMetadataAttributesWithDefaults instantiates a new VCUMetadataAttributes object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVCUMetadataAttributesWithDefaults() *VCUMetadataAttributes {
	this := VCUMetadataAttributes{}
	return &this
}

// GetRegion returns the Region field value if set, zero value otherwise.
func (o *VCUMetadataAttributes) GetRegion() string {
	if o == nil || IsNil(o.Region) {
		var ret string
		return ret
	}
	return *o.Region
}

// GetRegionOk returns a tuple with the Region field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VCUMetadataAttributes) GetRegionOk() (*string, bool) {
	if o == nil || IsNil(o.Region) {
		return nil, false
	}
	return o.Region, true
}

// HasRegion returns a boolean if a field has been set.
func (o *VCUMetadataAttributes) HasRegion() bool {
	if o != nil && !IsNil(o.Region) {
		return true
	}

	return false
}

// SetRegion gets a reference to the given string and assigns it to the Region field.
func (o *VCUMetadataAttributes) SetRegion(v string) {
	o.Region = &v
}

// GetTotalVintageQuantity returns the TotalVintageQuantity field value if set, zero value otherwise.
func (o *VCUMetadataAttributes) GetTotalVintageQuantity() string {
	if o == nil || IsNil(o.TotalVintageQuantity) {
		var ret string
		return ret
	}
	return *o.TotalVintageQuantity
}

// GetTotalVintageQuantityOk returns a tuple with the TotalVintageQuantity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VCUMetadataAttributes) GetTotalVintageQuantityOk() (*string, bool) {
	if o == nil || IsNil(o.TotalVintageQuantity) {
		return nil, false
	}
	return o.TotalVintageQuantity, true
}

// HasTotalVintageQuantity returns a boolean if a field has been set.
func (o *VCUMetadataAttributes) HasTotalVintageQuantity() bool {
	if o != nil && !IsNil(o.TotalVintageQuantity) {
		return true
	}

	return false
}

// SetTotalVintageQuantity gets a reference to the given string and assigns it to the TotalVintageQuantity field.
func (o *VCUMetadataAttributes) SetTotalVintageQuantity(v string) {
	o.TotalVintageQuantity = &v
}

// GetMethodology returns the Methodology field value if set, zero value otherwise.
func (o *VCUMetadataAttributes) GetMethodology() string {
	if o == nil || IsNil(o.Methodology) {
		var ret string
		return ret
	}
	return *o.Methodology
}

// GetMethodologyOk returns a tuple with the Methodology field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VCUMetadataAttributes) GetMethodologyOk() (*string, bool) {
	if o == nil || IsNil(o.Methodology) {
		return nil, false
	}
	return o.Methodology, true
}

// HasMethodology returns a boolean if a field has been set.
func (o *VCUMetadataAttributes) HasMethodology() bool {
	if o != nil && !IsNil(o.Methodology) {
		return true
	}

	return false
}

// SetMethodology gets a reference to the given string and assigns it to the Methodology field.
func (o *VCUMetadataAttributes) SetMethodology(v string) {
	o.Methodology = &v
}

func (o VCUMetadataAttributes) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o VCUMetadataAttributes) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Region) {
		toSerialize["region"] = o.Region
	}
	if !IsNil(o.TotalVintageQuantity) {
		toSerialize["totalVintageQuantity"] = o.TotalVintageQuantity
	}
	if !IsNil(o.Methodology) {
		toSerialize["methodology"] = o.Methodology
	}
	return toSerialize, nil
}

type NullableVCUMetadataAttributes struct {
	value *VCUMetadataAttributes
	isSet bool
}

func (v NullableVCUMetadataAttributes) Get() *VCUMetadataAttributes {
	return v.value
}

func (v *NullableVCUMetadataAttributes) Set(val *VCUMetadataAttributes) {
	v.value = val
	v.isSet = true
}

func (v NullableVCUMetadataAttributes) IsSet() bool {
	return v.isSet
}

func (v *NullableVCUMetadataAttributes) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVCUMetadataAttributes(val *VCUMetadataAttributes) *NullableVCUMetadataAttributes {
	return &NullableVCUMetadataAttributes{value: val, isSet: true}
}

func (v NullableVCUMetadataAttributes) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVCUMetadataAttributes) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


